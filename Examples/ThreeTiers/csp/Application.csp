
--include "Framework.csp"

include "FrameworkProcess.csp"

--****************************************************************************************************************************************************************************************************
--*******************************************************************************************APLICATION***********************************************************************************************
--****************************************************************************************************************************************************************************************************

-- SAFELET: MY APP

nametype SafeltAppSync = 
    {| getSequencerCall, getSequencerRet,initializeApplicationCall, initializeApplicationRet, end_safelet_app |}

nametype MyAppChanSet =
  {| getSequencerCall, getSequencerRet,initializeApplicationCall, initializeApplicationRet, end_safelet_app |}

MyApp  = 
	(
	 	Methods_s 
	)		
 /\	(end_safelet_app -> SKIP)

GetSequencer_s = 
	getSequencerCall -> 
	getSequencerRet!TopLevelSequencerId ->
	SKIP
       
InitializeApplication_s =  
     initializeApplicationCall -> 
     initializeApplicationRet ->
     SKIP

Methods_s = 
 ( 
	GetSequencer_s
	[] 
	InitializeApplication_s 
 ); Methods_s


--TOP LEVEL SEQUENCER: MY SEQUENCER

channel get_sequencer_done : SchedulableID.Bool
channel set_sequencer_done : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_sequencer_done, set_sequencer_done |}

nametype MissionSequencerAppSync = {|getNextMissionCall, getNextMissionRet,end_sequencer_app|}

nametype MySequencerAppChanSet =
  union(MissionSequencerAppStateSync,MissionSequencerAppSync)

MainSequencerApp = 
(
  Methods_tlms 
    [|MissionSequencerAppStateSync|] 
  DoneController_tlms(False) 
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.TopLevelSequencerId -> SKIP)
   

DoneController_tlms(done) =
(
	get_sequencer_done.TopLevelSequencerId!done ->
	DoneController_tlms(done)
)
[]
(
	set_sequencer_done.TopLevelSequencerId?newDone ->
	DoneController_tlms(newDone)
)


GetNextMission_tlms = 
    getNextMissionCall.TopLevelSequencerId -> 
	get_sequencer_done.TopLevelSequencerId?done ->
	(
	  if done == False then
	  (
		set_sequencer_done.TopLevelSequencerId!True ->
		getNextMissionRet.TopLevelSequencerId!MainMissionId  ->
		SKIP
      )
	  else 
	  (
			getNextMissionRet.TopLevelSequencerId!nullMissionId ->
		    SKIP
	  )
    )

Methods_tlms = 
 (
	GetNextMission_tlms 
 ) ; Methods_tlms  






--TOP LEVEL MISSION: TOP MISSION 1

nametype MissionAppSync = {|initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet   |}

nametype TopMission1AppChanSet =
  {| initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,
    register.ManagedThread1Id.MainMissionId, register.NestedMissionSequencerId.MainMissionId
    |}

MainMissionApp = 
( 
	(
		(Methods_tlm1 )
		/\ 
		(end_mission_app.MainMissionId -> SKIP )
	) 
)


InitializePhase_tlm1 = 
  initializeCall.MainMissionId   -> 
  register!ManagedThread1Id!MainMissionId  -> 
  register!NestedMissionSequencerId!MainMissionId  ->  
  initializeRet.MainMissionId  -> 
 SKIP

CleanupPhase_tlm1 = 
 cleanupMissionCall.MainMissionId  ->
 cleanupMissionRet.MainMissionId?continueSequencer ->
 SKIP

Methods_tlm1 = 
( 
	InitializePhase_tlm1 
	[] 
	CleanupPhase_tlm1
) ; Methods_tlm1
  





-- MANAGEDTHREAPP1

channel setupActions

ManagedThread1App = 
(
	Methods_mt1
)
/\ (end_managedThread_app.ManagedThread1Id -> SKIP)

Methods_mt1 =
	Release_mt1

Release_mt1 =
	runCall.ManagedThread1Id -> 
	setupActions ->
	runRet.ManagedThread1Id ->
	SKIP




--NESTED MISSION SEQUENCER



NestedMissionSequencerApp = 
(
  Methods_nms 
    [|MissionSequencerAppStateSync|] 
    DoneController_nms(False) 
) \MissionSequencerAppStateSync
/\ (end_sequencer_app.NestedMissionSequencerId -> SKIP)


DoneController_nms(done) =
(
	get_sequencer_done.NestedMissionSequencerId!done ->
	DoneController_nms(done)
)
[]
(
	set_sequencer_done.NestedMissionSequencerId?newDone ->
	DoneController_nms(newDone)
)

GetNextMission_nms = 
  getNextMissionCall.NestedMissionSequencerId -> 
	get_sequencer_done.NestedMissionSequencerId?done ->
	if done == False then 
    (  
		set_sequencer_done.NestedMissionSequencerId!True ->
		getNextMissionRet.NestedMissionSequencerId!NestedMissionId ->
		SKIP
	)
	else
	(  
		getNextMissionRet.NestedMissionSequencerId!nullMissionId ->
		SKIP
	)


Methods_nms = 
( 
	GetNextMission_nms 	
) ; Methods_nms

  


-- NESTED MISSION: MY MISSION 1


NestedMissionApp = 
(
	( 
		Methods_nm 
		/\ 
		(end_mission_app.NestedMissionId -> SKIP )
	) 

)




InitializePhase_nm = 
  initializeCall.NestedMissionId  -> 
  register!NestedMissionSequencerAId!NestedMissionId -> 
  register!NestedMissionSequencerBId!NestedMissionId -> 
  initializeRet.NestedMissionId -> 
 SKIP

CleanupPhase_nm = 
 cleanupMissionCall.NestedMissionId ->
 cleanupMissionRet.NestedMissionId!True ->
	SKIP

Methods_nm = 
( 
	InitializePhase_nm 
	[] 
	CleanupPhase_nm
) ; Methods_nm


--NESTED MISSION SEQUENCER


NestedMissionSequencerAApp = 
(
  Methods_nmsa 
    [|MissionSequencerAppStateSync|] 
    DoneController_nmsa(False) 
) \MissionSequencerAppStateSync
/\ (end_sequencer_app.NestedMissionSequencerAId -> SKIP)


DoneController_nmsa(done) =
(
	get_sequencer_done.NestedMissionSequencerAId!done ->
	DoneController_nmsa(done)
)
[]
(
	set_sequencer_done.NestedMissionSequencerAId?newDone ->
	DoneController_nmsa(newDone)
)

GetNextMission_nmsa = 
  getNextMissionCall.NestedMissionSequencerAId -> 
	get_sequencer_done.NestedMissionSequencerAId?done ->
	if done == False then 
    (  
		set_sequencer_done.NestedMissionSequencerAId!True ->
		getNextMissionRet.NestedMissionSequencerAId!MissionAId ->
		SKIP
	)
	else
	(  
		getNextMissionRet.NestedMissionSequencerAId!nullMissionId ->
		SKIP
	)


Methods_nmsa = 
( 
	GetNextMission_nmsa	
) ; Methods_nmsa






--NESTED MISSION SEQUENCER



NestedMissionSequencerBApp = 
(
  Methods_nmsb 
    [|MissionSequencerAppStateSync|] 
    DoneController_nmsb(False) 
) \MissionSequencerAppStateSync
/\ (end_sequencer_app.NestedMissionSequencerBId -> SKIP)


DoneController_nmsb(done) =
(
	get_sequencer_done.NestedMissionSequencerBId!done ->
	DoneController_nmsb(done)
)
[]
(
	set_sequencer_done.NestedMissionSequencerBId?newDone ->
	DoneController_nmsb(newDone)
)

GetNextMission_nmsb = 
  getNextMissionCall.NestedMissionSequencerBId -> 
	get_sequencer_done.NestedMissionSequencerBId?done ->
	if done == False then 
    (  
		set_sequencer_done.NestedMissionSequencerBId!True ->
		getNextMissionRet.NestedMissionSequencerBId!MissionBId ->
		SKIP
	)
	else
	(  
		getNextMissionRet.NestedMissionSequencerBId!nullMissionId ->
		SKIP
	)


Methods_nmsb = 
( 
	GetNextMission_nmsb 	
) ; Methods_nmsb




-- NESTED MISSION: MY MISSION 1


MissionAApp = 
(
	( 
		Methods_ma 
		/\ 
		(end_mission_app.MissionAId -> SKIP )
	) 

)



InitializePhase_ma = 
  initializeCall.MissionAId  -> 
  register!ManagedThread2Id!MissionAId ->   
  initializeRet.MissionAId -> 
 SKIP

CleanupPhase_ma = 
 cleanupMissionCall.MissionAId ->
 cleanupMissionRet.MissionAId!True ->
	SKIP

Methods_ma = 
( 
	InitializePhase_ma 
	[] 
	CleanupPhase_ma
) ; Methods_ma







-- NESTED MISSION: MY MISSION 1


MissionBApp = 
(
	( 
		Methods_mb 
		/\ 
		(end_mission_app.MissionBId -> SKIP )
	) 

)



InitializePhase_mb = 
  initializeCall.MissionBId  -> 
  register!ManagedThread3Id!MissionBId -> 
  initializeRet.MissionBId -> 
 SKIP

CleanupPhase_mb = 
 cleanupMissionCall.MissionBId ->
 cleanupMissionRet.MissionBId!True ->
	SKIP

Methods_mb = 
( 
	InitializePhase_mb 
	[] 
	CleanupPhase_mb
) ; Methods_mb








-- MANAGEDTHREAPP2

channel sysatemActions : SchedulableID

ManagedThread2App = 
(
	Methods_mt2
)
/\ (end_managedThread_app.ManagedThread2Id -> SKIP)

Methods_mt2 =
	Release_mt2

Release_mt2 =
	runCall.ManagedThread2Id -> 
	sysatemActions.ManagedThread2Id ->
	requestTermination.MissionAId.ManagedThread2Id ->
	runRet.ManagedThread2Id ->
	SKIP


-- MANAGEDTHREAPP3

nametype MTAppSync = {| runCall, runRet, requestTermination, end_managedThread_app |}

ManagedThread3App = 
(
	Methods_mt3
)
/\ (end_managedThread_app.ManagedThread3Id -> SKIP)

Methods_mt3 =
	Release_mt3

Release_mt3 =
	runCall.ManagedThread3Id -> 
	sysatemActions.ManagedThread3Id ->
	requestTermination.MissionBId.ManagedThread3Id ->
	runRet.ManagedThread3Id ->
	SKIP







nametype SafeletProgramSync = {| done_safeletFW, start_toplevel_sequencer, done_toplevel_sequencer, deregister, checkSchedulable, 
                                register.ManagedThread1Id.MainMissionId, register.NestedMissionSequencerId.MainMissionId, 
								register.NestedMissionSequencerAId.NestedMissionId, register.NestedMissionSequencerBId.NestedMissionId, 
  								register.ManagedThread2Id.MissionAId, register.ManagedThread3Id.MissionBId

                                |}


nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}


--nametype Mission1Sync = {| done_safeletFW, done_toplevel_sequencer,  
 --                  signalTerminationCall, signalTerminationRet, activate_schedulables, done_schedulable, 
 --                  cleanupSchedulableCall, cleanupSchedulableRet, 
 --                  register.FirstMissionSequencerID.TopMission1ID, 
 --                  register.SecondMissionSequencerID.TopMission1ID, 
--                   register.ThirdMissionSequencerID.TopMission1ID|}







ThreeTiers =
(  
 	MyApp
 	|||
 	MainSequencerApp
 	|||
 	MainMissionApp
 	|||
 	ManagedThread1App
 	|||
 	NestedMissionSequencerApp
 	|||
 	NestedMissionApp
 	|||
 	NestedMissionSequencerAApp
 	|||
 	NestedMissionSequencerBApp
 	|||
 	MissionAApp
 	|||
 	MissionBApp
 	|||
 	ManagedThread3App
 	|||
 	ManagedThread2App 
)

	

Program(topLevelSequencerIDs, tier0MissionIDs, tier0SchedulableIDS, nestedTierIDs) = 
(  
	TieredFramework(topLevelSequencerIDs, tier0MissionIDs, tier0SchedulableIDS, nestedTierIDs)
	[| Union({SafeltAppSync, MissionSequencerAppSync, MissionAppSync, MTAppSync, {|end_mission_app, setCeilingPriority|}})  |]
	ThreeTiers	
)

Program2(topLevelSequencerIDs, tier0MissionIDs, tier0SchedulableIDS, nestedTierIDs) = 
(  
	TieredFramework2(topLevelSequencerIDs, tier0MissionIDs, tier0SchedulableIDS, nestedTierIDs)
	[| Union({SafeltAppSync, MissionSequencerAppSync, MissionAppSync, MTAppSync, {|end_mission_app, setCeilingPriority|}})  |]
	ThreeTiers	
)

-- PEH : schedulable, period, startTime, deadline, deadlineMissHandler
TestProgram = 
	Program({TopLevelSequencerId},
            {MainMissionId}, 
            ({NestedMissionSequencerId},{}, {},  {}, {ManagedThread1Id}),
                  {(
                  		{NestedMissionId}, 
                  		({NestedMissionSequencerAId, NestedMissionSequencerBId}, {}, {},  {}, {})
                  	)
                  ,
                  	(	
                  		{MissionAId, MissionBId}, 
                  		({}, {}, {},  {}, {ManagedThread2Id, ManagedThread3Id})
                  	)
                  }
            )

TestProgram2 = 
	Program2({TopLevelSequencerId},
            {MainMissionId}, 
            ({NestedMissionSequencerId},{}, {},  {}, {ManagedThread1Id}),
                  {(
                  		{NestedMissionId}, 
                  		({NestedMissionSequencerAId, NestedMissionSequencerBId}, {}, {},  {}, {})
                 -- 	)
                  ,
                 -- 	(	
                  		{MissionAId, MissionBId}, 
                  		({}, {}, {},  {}, {ManagedThread2Id, ManagedThread3Id})
                  	)
                  }
            )

TestStaticTiers =

Tiers1and2({(
                  		{NestedMissionId}, 
                  		({NestedMissionSequencerAId, NestedMissionSequencerBId}, {}, {},  {}, {})
                 -- 	)
                  ,
                 -- 	(	
                  		{MissionAId, MissionBId}, 
                  		({}, {}, {},  {}, {ManagedThread2Id, ManagedThread3Id})
                  	)} )

assert sbisim(diamond(TestProgram)) ; Loop :[ deadlock free [FD] ]
assert sbisim(diamond(TestProgram)) :[ divergence free ]
assert sbisim(diamond(TestProgram)) :[ deterministic  [FD] ]
