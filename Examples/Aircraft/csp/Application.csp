
--include "Framework.csp"

include "FrameworkProcess.csp"

--****************************************************************************************************************************************************************************************************
--*******************************************************************************************APLICATION***********************************************************************************************
--****************************************************************************************************************************************************************************************************

-- SAFELET: MY APP

nametype SafeltAppSync = 
    {| getSequencerCall, getSequencerRet,initializeApplicationCall, initializeApplicationRet, end_safelet_app |}


MySafelet  = 
	(
	 	Methods_s 
	)		
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =  
     initializeApplicationCall -> 
     initializeApplicationRet ->
     SKIP

GetSequencer_s = 
	getSequencerCall -> 
	getSequencerRet!MainMissionSequencerId ->
	SKIP

Methods_s = 
 ( 
	GetSequencer_s
	[] 
	InitializeApplication_s 
 ); Methods_s


--MainMissionSequencer

channel get_returnedMission : SchedulableID.Bool
channel set_returnedMission : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_returnedMission, set_returnedMission |}

nametype MissionSequencerAppSync = {|getNextMissionCall, getNextMissionRet,end_sequencer_app|}



MainMissionSequencerApp = 
(
  Methods_mms 
    [|MissionSequencerAppStateSync|] 
  DoneController_mms (False) 
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.MainMissionSequencerId -> SKIP)
   

DoneController_mms (done) =
(
	get_returnedMission.MainMissionSequencerId!done ->
	DoneController_mms (done)
)
[]
(
	set_returnedMission.MainMissionSequencerId?newDone ->
	DoneController_mms (newDone)
)


GetNextMission_mms  = 
    getNextMissionCall.MainMissionSequencerId -> 
	get_returnedMission.MainMissionSequencerId?done ->
	(
	  if done == False then
	  (
		set_returnedMission.MainMissionSequencerId!True ->
		getNextMissionRet.MainMissionSequencerId!MainMissionId  ->
		SKIP
      )
	  else 
	  (
		getNextMissionRet.MainMissionSequencerId!nullMissionId ->
		SKIP
	  )
    )

Methods_mms  = 
 (
	GetNextMission_mms 
 ) ; Methods_mms  






--TOP LEVEL MISSION: TOP MISSION 1



nametype MissionAppSync = {|initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet   |}

channel updateAirSpeed : MissionID.{0..3}

--channel get_airSpeed : SchedulableID.{1..3}
channel update_airSpeed : MissionID.{0..3}

nametype MainMissionStateSync = {|update_airSpeed |}

MainMissionApp = 
(
	Methods_mm 
		[| MainMissionStateSync |]
	MainMissionState(0)
)\MainMissionStateSync
/\ (end_mission_app.MainMissionId -> SKIP )


MainMissionState(0) = 
(
	update_airSpeed.MainMissionId?newAirSpeed ->
	MainMissionState(newAirSpeed)
)


InitializePhase_mm = 
  initializeCall.MainMissionId   -> 
  register!ModeChangerId!MainMissionId  -> 
  register!EnvironmentMonitorId!MainMissionId  -> 
  register!ControlHandlerId!MainMissionId  ->  
  initializeRet.MainMissionId  -> 
 SKIP

CleanupPhase_mm = 
 cleanupMissionCall.MainMissionId  ->
 cleanupMissionRet.MainMissionId?false ->
 SKIP


UpdateAirSpeed_mm = 
	updateAirSpeed.MainMissionId?newAirSpeed ->
	update_airSpeed.MainMissionId!newAirSpeed ->
	SKIP

Methods_mm = 
( 
	InitializePhase_mm 
	[] 
	CleanupPhase_mm
	[]
	UpdateAirSpeed_mm
) ; Methods_mm
  


--Mode Changer
channel get_modesLeft : SchedulableID.{1..3}
channel set_modesLeft : SchedulableID.{1..3}

channel get_currentMode : SchedulableID.MissionID
channel set_currentMode : SchedulableID.MissionID




nametype ModeChangerStateSync = 
	{|get_modesLeft, set_modesLeft, get_currentMode, set_currentMode |}

ModeChangerApp = 
(
  Methods_mc
    [|ModeChangerStateSync|] 
  ModeChangerState_mc(3, nullMissionId) 
) \ModeChangerStateSync
/\ (end_sequencer_app.ModeChangerId -> SKIP)


ModeChangerState_mc(modesLeft, currentMode) =
(
	get_modesLeft.ModeChangerId!modesLeft ->
	ModeChangerState_mc(modesLeft, currentMode)
)
[]
(
	set_modesLeft.ModeChangerId?newModesLeft ->
	ModeChangerState_mc(newModesLeft, currentMode)
)
[]
(
	get_currentMode.ModeChangerId!currentMode ->
	ModeChangerState_mc(modesLeft, currentMode)
)
[]
(
	set_currentMode.ModeChangerId?newCurrentMode ->
	ModeChangerState_mc(modesLeft, newCurrentMode)
)



GetNextMission_mc = 
    getNextMissionCall.ModeChangerId -> 
    get_currentMode.ModeChangerId?currentMode ->
	getNextMissionRet.ModeChangerId!currentMode ->
	SKIP

	
AdvanceMode_mc =
	get_modesLeft.ModeChangerId?modesLeft ->
	if modesLeft == 3 then 
    (  
		set_modesLeft.ModeChangerId!2 -> 
		set_currentMode.ModeChangerId!LaunchModeId ->
		SKIP
	)
    else
    (
    	
	    if modesLeft == 2 then 
	    (  
			set_modesLeft.ModeChangerId!1 -> 
			set_currentMode.ModeChangerId!CruiseModeId ->
			SKIP
		)
	    else
		(  
			if modesLeft == 1 then 
			(
				set_modesLeft.ModeChangerId!0 -> 
				set_currentMode.ModeChangerId!LandModeId ->
				SKIP
			)
			else
			(
				set_currentMode.ModeChangerId!nullMissionId ->
				SKIP
			)
		)
    )		





Methods_mc = 
( 
	GetNextMission_mc	
	[]
	AdvanceMode_mc
	
) ; Methods_mc





--- Environment Monitor

channel checkEnvironment : SchedulableID.Bool

EnvironmentMonitorApp =
(
	Methods_em
)
/\ (end_periodicEventHandler_app.EnvironmentMonitorId -> SKIP)

Methods_em =
	handlerAsyncEvent_em ; Methods_em

handlerAsyncEvent_em =
	handleAsyncEventCall.EnvironmentMonitorId -> 
	checkEnvironment.EnvironmentMonitorId?check ->
	if check == false then
	(
		requestTermination.MainMissionId.EnvironmentMonitorId ->
		SKIP
	)
	else
	(
		SKIP
	)
	;
    handleAsyncEventRet.EnvironmentMonitorId ->
    SKIP  


--- Control Handler

channel handleControls : SchedulableID

ControlHandlerApp =
(
	Methods_ch
)
/\ (end_aperiodicEventHandler_app.ControlHandlerId -> SKIP)

Methods_ch =
	handlerAsyncEvent_ch ; Methods_ch

handlerAsyncEvent_ch =
	handleAsyncEventCall.ControlHandlerId -> 
		handleControls.ControlHandlerId ->
    handleAsyncEventRet.ControlHandlerId ->
    SKIP  


--AirSpeedMonitor

AirSpeedMonitorApp =
(
	Methods_asm
)
/\ (end_periodicEventHandler_app.AirSpeedMonitorId -> SKIP)

Methods_asm =
	handlerAsyncEvent_asm ; Methods_asm

handlerAsyncEvent_asm =	
	handleAsyncEventCall.AirSpeedMonitorId -> 
	updateAirSpeed.MainMissionId!2 ->
    handleAsyncEventRet.AirSpeedMonitorId ->
    SKIP  


-- Launch Mission

channel get_launch : MissionID.Bool
channel set_launch : MissionID.Bool

channel goodToLaunch : MissionID
channel canLaunchCall : MissionID
channel canLaunchRet : MissionID.Bool


nametype LaunchMissionStateSync = {| get_launch, set_launch  |}

LaunchMissionAApp = 
(
	Methods_lm
	[| LaunchMissionStateSync |]	
	LaunchMissionState(False)
	 
) \ LaunchMissionStateSync
/\ (end_mission_app.LaunchModeId -> SKIP )


LaunchMissionState(launch) =
(
	get_launch.LaunchModeId!launch->
	LaunchMissionState(launch)
)
[]
(
	set_launch.LaunchModeId?newLaunch ->
	LaunchMissionState(newLaunch)
)	

InitializePhase_lm = 
  initializeCall.LaunchModeId  -> 
  set_launch.LaunchModeId!False ->
  register!LaunchConditionsMonitorId!LaunchModeId ->  
  register!LaunchHandlerId!LaunchModeId ->  
  register!LaunchCountdownId!LaunchModeId ->  
  initializeRet.LaunchModeId -> 
  SKIP

CleanupPhase_lm = 
 cleanupMissionCall.LaunchModeId ->
 cleanupMissionRet.LaunchModeId!True ->
	SKIP

GoodToLaunch_lm =
	goodToLaunch.LaunchModeId ->
	set_launch.LaunchModeId!True ->
	SKIP

CanLaunch_lm =
	canLaunchCall.LaunchModeId ->
	get_launch.LaunchModeId?launch ->
	canLaunchRet.LaunchModeId!launch ->
	SKIP

Methods_lm = 
( 
	InitializePhase_lm 
	[] 
	CleanupPhase_lm
	[]
	GoodToLaunch_lm
	[]
	CanLaunch_lm
) ; Methods_lm


-- Launch Conditions Monitor

LaunchConditionsMonitorApp =
(
	Methods_lcm
)
/\ (end_oneshotEventHandler_app.LaunchConditionsMonitorId -> SKIP)

Methods_lcm =
	handlerAsyncEvent_lcm ; Methods_lcm

handlerAsyncEvent_lcm =
	handleAsyncEventCall.LaunchConditionsMonitorId -> 
	-- simulate some checking here? How though?
	goodToLaunch.LaunchModeId ->
    handleAsyncEventRet.LaunchConditionsMonitorId ->
    SKIP  


-- LaunchCountdown

channel get_countdown : SchedulableID.{0..5}
channel set_countdown : SchedulableID.{0..5}

nametype LaunchCountdownStateSync = {|get_countdown, set_countdown |}

LaunchCountdownApp =
(
	Methods_lc
	[| LaunchCountdownStateSync |]
	LaunchCountdownState(5)
) \ LaunchCountdownStateSync
/\ (end_periodicEventHandler_app.LaunchCountdownId -> SKIP)


LaunchCountdownState(countdown) =
(
	get_countdown.LaunchCountdownId!countdown ->
	LaunchCountdownState(countdown)
)
[]
(
	set_countdown.LaunchCountdownId?newCountdown ->
	LaunchCountdownState(newCountdown)
)

Methods_lc =
	handlerAsyncEvent_lc ; Methods_lc

handlerAsyncEvent_lc =
	handleAsyncEventCall.LaunchCountdownId -> 
	get_countdown.LaunchCountdownId?countdown ->
	if countdown == 0 then
	(
		release.LaunchHandlerId ->
		SKIP
	)
	else
	(
		set_countdown.LaunchCountdownId!countdown-1 ->
		SKIP
	)
	;
    handleAsyncEventRet.LaunchCountdownId ->
    SKIP  




--LaunchHandler

channel launching : SchedulableID

LaunchHandlerApp =
(
	Methods_lh
)
/\ (end_aperiodicEventHandler_app.LaunchHandlerId -> SKIP)

Methods_lh =
	handlerAsyncEvent_lh ; Methods_lh

handlerAsyncEvent_lh =
	handleAsyncEventCall.LaunchHandlerId -> 
	launching.LaunchHandlerId ->
	requestTermination.LaunchModeId.LaunchHandlerId -> 
    handleAsyncEventRet.LaunchHandlerId ->
    SKIP  


-- CruiseMission

channel setOkToCruise : MissionID.Bool
channel isOkToCruiseCall : MissionID
channel isOkToCruiseRet : MissionID.Bool

channel set_okToCruise : MissionID.Bool
channel get_okToCruise : MissionID.Bool

nametype CruiseMissionStateSync = {|set_okToCruise, get_okToCruise |}

CruiseMissionApp = 
( 
	Methods_cm
		[| CruiseMissionStateSync |]
	CruiseMissionState(False)
) \ CruiseMissionStateSync
/\ (end_mission_app.CruiseModeId -> SKIP )

CruiseMissionState(okToCruise) =
(
	get_okToCruise.CruiseModeId!okToCruise ->
	CruiseMissionState(okToCruise)
)
[]
(
	set_okToCruise.CruiseModeId?newOkToCruise ->
	CruiseMissionState(newOkToCruise)
)


InitializePhase_cm = 
  initializeCall.CruiseModeId  -> 

  register!CruiseConditionsMonitorId!CruiseModeId ->   
  register!BurnActivationHandlerId!CruiseModeId ->   
  register!BeginLandingHandlerId!CruiseModeId ->   

  initializeRet.CruiseModeId -> 
  SKIP

CleanupPhase_cm = 
 cleanupMissionCall.CruiseModeId ->
 cleanupMissionRet.CruiseModeId!True ->
	SKIP

setOkToCruise_cm =
	setOkToCruise.CruiseModeId?newOkToCruise ->
	set_okToCruise.CruiseModeId!newOkToCruise ->
	SKIP

isOkToCruise_cm =
	isOkToCruiseCall.CruiseModeId ->
	get_okToCruise.CruiseModeId?okToCruise ->
	isOkToCruiseRet.CruiseModeId!okToCruise ->
	SKIP

Methods_cm = 
( 
	InitializePhase_cm
	[] 
	CleanupPhase_cm
	[]
	setOkToCruise_cm
	[]
	isOkToCruise_cm
) ; Methods_cm


-- CruiseConditionsMonitor
CruiseConditionsMonitorApp =
(
	Methods_ccm
)
/\ (end_periodicEventHandler_app.CruiseConditionsMonitorId -> SKIP)

Methods_ccm =
	handlerAsyncEvent_ccm ; Methods_ccm

handlerAsyncEvent_ccm =
	handleAsyncEventCall.CruiseConditionsMonitorId -> 
	setOkToCruise.CruiseModeId!True -> 
    handleAsyncEventRet.CruiseConditionsMonitorId ->
    SKIP  


-- BurnActivationHandler

channel activateBurn : SchedulableID

BurnActivationHandlerApp =
(
	Methods_bah
)
/\ (end_aperiodicEventHandler_app.BurnActivationHandlerId -> SKIP)

Methods_bah =
	handlerAsyncEvent_bah ; Methods_bah

handlerAsyncEvent_bah =
	handleAsyncEventCall.BurnActivationHandlerId -> 
	isOkToCruiseCall.CruiseModeId ->
	isOkToCruiseRet.CruiseModeId?okToCruise ->
	if okToCruise == True then
	(
		activateBurn.BurnActivationHandlerId ->
		SKIP
	)
	else
	(
		SKIP
	)
	;
    handleAsyncEventRet.BurnActivationHandlerId ->
    SKIP 

--BeginLandingHandler

channel beginLanding : SchedulableID

BeginLandingHandlerApp =
(
	Methods_blh
)
/\ (end_aperiodicEventHandler_app.BeginLandingHandlerId -> SKIP)

Methods_blh =
	handlerAsyncEvent_blh ; Methods_blh

handlerAsyncEvent_blh =
	beginLanding.BeginLandingHandlerId ->
	release.BeginLandingHandlerId ->
	handleAsyncEventCall.BeginLandingHandlerId -> 
	requestTermination.CruiseModeId.BeginLandingHandlerId ->
    handleAsyncEventRet.BeginLandingHandlerId ->
    SKIP  





-- LandMission

channel updateGroundDistance : MissionID.{50}

LandMissionApp = 
( 
	Methods_lam	
)
/\ (end_mission_app.LandModeId -> SKIP )

InitializePhase_lam = 
  initializeCall.LandModeId  -> 
  register!GroundDistanceMonitorId!LandModeId ->   
  register!LandingGearHandlerId!LandModeId -> 
  initializeRet.LandModeId -> 
  SKIP

CleanupPhase_lam = 
 cleanupMissionCall.LandModeId ->
 cleanupMissionRet.LandModeId!True ->
 SKIP

UpdateGroundDistance_lam =
	updateGroundDistance.LandModeId?newDistanceFromGround ->
	if newDistanceFromGround == 50 then
	(
		release.LandingGearHandlerId ->
		SKIP
	)
	else
	(
		SKIP
	)

Methods_lam = 
( 
	InitializePhase_lam
	[] 
	CleanupPhase_lam
	[]
	UpdateGroundDistance_lam
) ; Methods_lam


--GroundDistanceMonitor

GroundDistanceMonitorApp =
(
	Methods_gdm
)
/\ (end_periodicEventHandler_app.GroundDistanceMonitorId -> SKIP)

Methods_gdm =
	handlerAsyncEvent_gdm ; Methods_gdm

handlerAsyncEvent_gdm =
	handleAsyncEventCall.GroundDistanceMonitorId -> 
	updateGroundDistance.LandModeId!50 ->
    handleAsyncEventRet.GroundDistanceMonitorId ->
    SKIP  


-- LandingGearHandler

channel deployLandingGear : SchedulableID

LandingGearHandlerApp =
(
	Methods_lgh
)
/\ (end_aperiodicEventHandler_app.LandingGearHandlerId -> SKIP)

Methods_lgh =
	handlerAsyncEvent_lgh ; Methods_lgh

handlerAsyncEvent_lgh =
	handleAsyncEventCall.LandingGearHandlerId -> 
	deployLandingGear.LandingGearHandlerId ->
	requestTermination.LandModeId.LandingGearHandlerId  ->
    handleAsyncEventRet.LandingGearHandlerId ->
    SKIP 







nametype MTAppSync = {| runCall, runRet,  end_managedThread_app |}


nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

Aircraft =
(  
	MySafelet
	|||
	MainMissionSequencerApp
	|||
	MainMissionApp
	|||
	ModeChangerApp
	|||
	EnvironmentMonitorApp
	|||
	ControlHandlerApp
	|||
	AirSpeedMonitorApp
	|||
	LaunchMissionAApp
	|||
	LaunchConditionsMonitorApp
	|||
	LaunchCountdownApp
	|||
	LaunchHandlerApp
	|||
	CruiseMissionApp
	|||
	CruiseConditionsMonitorApp
	|||
	BurnActivationHandlerApp
	|||
	BeginLandingHandlerApp
	|||
	LandMissionApp
	|||
	GroundDistanceMonitorApp
	|||
	LandingGearHandlerApp
)	


--nametype APEHSync = {| release |}
nametype OSEHSync = {| descheduleCall, descheduleRet, scheduleNextRelease, getNextReleaseTimeCall, getNextReleaseTimeRet |}

Program(topLevelSequencerIDs, tier0, tier1IDs) = 
(  
	ClustereAndTieredFramework(topLevelSequencerIDs, tier0, tier1IDs)
		[| Union({SafeltAppSync, MissionSequencerAppSync, MissionAppSync, MTAppSync, OSEHSync , --APEHSync, 
		 {|end_mission_app, setCeilingPriority, requestTermination, end_oneshotEventHandler_app, end_aperiodicEventHandler_app, handleAsyncEventCall, handleAsyncEventRet|}})  |]
	Aircraft	
)

TestProgram = 
	Program(
				{MainMissionSequencerId},

				{ (MainMissionId , ({ModeChangerId},{(ControlHandlerId, aperiodic, 0, nullSchedulableId) }, {},  {(EnvironmentMonitorId, 1, 0, 0, nullSchedulableId), (AirSpeedMonitorId, 1, 0, 0, nullSchedulableId)}, {} )  )   },

				{ (LaunchModeId, ({}, {(LaunchHandlerId, aperiodic, 0, nullSchedulableId)}, {},  {(LaunchConditionsMonitorId, 1, 0, 0, nullSchedulableId), (LaunchCountdownId, 1, 0, 0, nullSchedulableId)}, {})  )
				,		(CruiseModeId, ({(BurnActivationHandlerId, aperiodic, 0, nullSchedulableId), (BeginLandingHandlerId, aperiodic, 0, nullSchedulableId)}, {}, {},  {(CruiseConditionsMonitorId, 1, 0, 0, nullSchedulableId)}, {})  ), 
							(LandModeId, ({(LandingGearHandlerId, aperiodic, 0, nullSchedulableId)}, {}, {},  {(GroundDistanceMonitorId, 1, 0, 0, nullSchedulableId)}, {})  )
				}			                 
            )

assert sbisim(diamond(TestProgram)) ; Loop :[ deadlock free [FD] ]
assert sbisim(diamond(TestProgram)) :[ divergence free ]
assert sbisim(diamond(TestProgram)) :[ deterministic  [FD] ]