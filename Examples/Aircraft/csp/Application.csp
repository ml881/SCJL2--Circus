
--include "Framework.csp"

include "FrameworkProcess.csp"

--****************************************************************************************************************************************************************************************************
--*******************************************************************************************APLICATION***********************************************************************************************
--****************************************************************************************************************************************************************************************************

-- SAFELET: MY APP

nametype SafeltAppSync = 
    {| getSequencerCall, getSequencerRet,initializeApplicationCall, initializeApplicationRet, end_safelet_app |}


ACSafelet  = 
	(
	 	Methods_s 
	)		
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =  
     initializeApplicationCall -> 
     initializeApplicationRet ->
     SKIP

GetSequencer_s = 
	getSequencerCall -> 
	getSequencerRet!MainMissionSequencerId ->
	SKIP

Methods_s = 
 ( 
	GetSequencer_s
	[] 
	InitializeApplication_s 
 ); Methods_s


--MainMissionSequencer

channel get_returnedMission : SchedulableID.Bool
channel set_returnedMission : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_returnedMission, set_returnedMission |}

nametype MissionSequencerAppSync = {|getNextMissionCall, getNextMissionRet,end_sequencer_app|}



MainMissionSequencerApp = 
(
  Methods_mms 
    [|MissionSequencerAppStateSync|] 
  DoneController_mms (False) 
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.MainMissionSequencerId -> SKIP)
   

DoneController_mms (done) =
(
	get_returnedMission.MainMissionSequencerId!done ->
	DoneController_mms (done)
)
[]
(
	set_returnedMission.MainMissionSequencerId?newDone ->
	DoneController_mms (newDone)
)


GetNextMission_mms  = 
    getNextMissionCall.MainMissionSequencerId -> 
	get_returnedMission.MainMissionSequencerId?done ->
	(
	  if done == False then
	  (
		set_returnedMission.MainMissionSequencerId!True ->
		getNextMissionRet.MainMissionSequencerId!MainMissionId  ->
		SKIP
      )
	  else 
	  (
		getNextMissionRet.MainMissionSequencerId!nullMissionId ->
		SKIP
	  )
    )

Methods_mms  = 
 (
	GetNextMission_mms 
 ) ; Methods_mms  






--TOP LEVEL MISSION: TOP MISSION 1



nametype MissionAppSync = {|initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet   |}


channel getCabinPressureCall : MissionID
channel getCabinPressureRet : MissionID.{0..3}
channel setCabinPressure : MissionID.{0..3}

channel getEmergencyOxygenCall : MissionID
channel getEmergencyOxygenRet : MissionID.{0..3}
channel setEmergencyOxygen : MissionID.{0..3}

channel getFuelRemainingCall : MissionID
channel getFuelRemainingRet : MissionID.{0..3}
channel setFuelRemaining : MissionID.{0..3}
		
channel getAltitudeCall : SchedulableID.MissionID
channel getAltitudeRet : SchedulableID.MissionID.{0..3}
channel setAltitude : SchedulableID.MissionID.{0..3}

channel getAirSpeedCall : MissionID
channel getAirSpeedRet : MissionID.{0..3}
channel setAirSpeed : MissionID.{0..3}

channel getHeadingCall : MissionID
channel getHeadingRet : MissionID.{0..3}
channel setHeading : MissionID.{0..3}

-- State Channels
channel get_cabinPressure : {MainMissionId}.{0..3}
channel set_cabinPressure : {MainMissionId}.{0..3}

channel get_emergencyOxygen : {MainMissionId}.{0..3}
channel set_emergencyOxygen : {MainMissionId}.{0..3}

channel get_fuelRemaining : {MainMissionId}.{0..3}
channel set_fuelRemaining : {MainMissionId}.{0..3}
		
channel get_altitude : {MainMissionId}.{0..3}
channel set_altitude : {MainMissionId}.{0..3}

channel get_airSpeed : {MainMissionId}.{0..3}
channel set_airSpeed : {MainMissionId}.{0..3}

channel get_heading : {MainMissionId}.{0..3}
channel set_heading : {MainMissionId}.{0..3}

nametype MainMissionStateSync = 
	{|	get_cabinPressure, set_cabinPressure, get_emergencyOxygen, set_emergencyOxygen, get_fuelRemaining, set_fuelRemaining,
		get_altitude, set_altitude, get_airSpeed, set_airSpeed, get_heading, set_heading |}

MainMissionApp = 
(
	Methods_mm 
		[| MainMissionStateSync |]
	MainMissionState(0, 0, 0, 0, 0, 0)
)\MainMissionStateSync
/\ (end_mission_app.MainMissionId -> SKIP )


MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading) = 
(
	(
		get_cabinPressure.MainMissionId!cabinPressure ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		set_cabinPressure.MainMissionId?newCabinPressure ->
		MainMissionState(newCabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		get_emergencyOxygen.MainMissionId!emergencyOxygen ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		set_emergencyOxygen.MainMissionId?newEmergencyOxygen ->
		MainMissionState(cabinPressure, newEmergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		get_fuelRemaining.MainMissionId!fuelRemaining ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		set_fuelRemaining.MainMissionId?newFuelRemaining ->
		MainMissionState(cabinPressure, emergencyOxygen, newFuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		get_altitude.MainMissionId!altitude ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		set_altitude.MainMissionId?newAltitude ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, newAltitude, airSpeed, heading)
	)
	[]
	(
		get_airSpeed.MainMissionId!airSpeed ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		set_airSpeed.MainMissionId?newAirSpeed->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, newAirSpeed, heading)
	)
	[]
	(
		get_heading.MainMissionId!heading ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading)
	)
	[]
	(
		set_heading.MainMissionId?newHeading ->
		MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, newHeading)
	)
)


InitializePhase_mm = 
  initializeCall.MainMissionId   -> 
  register!ACModeChangerId!MainMissionId  -> 
  register!EnvironmentMonitorId!MainMissionId  -> 
  register!FlightSensorsMonitorId!MainMissionId ->
  register!CommunicationsHandlerId!MainMissionId ->
  register!ControlHandlerId!MainMissionId  ->  
  initializeRet.MainMissionId  -> 
 SKIP

CleanupPhase_mm = 
 cleanupMissionCall.MainMissionId  ->
 cleanupMissionRet.MainMissionId?false ->
 SKIP


GetCabinPressure_mm = 
	getCabinPressureCall.MainMissionId ->
	get_cabinPressure.MainMissionId?cabinPressure ->
	getCabinPressureRet.MainMissionId!cabinPressure ->
	SKIP

SetCabinPressure_mm = 
	setCabinPressure.MainMissionId?newCabinPressure ->
	set_cabinPressure.MainMissionId!newCabinPressure ->
	SKIP

GetFuelRemaining_mm = 
	getFuelRemainingCall.MainMissionId ->
	get_fuelRemaining.MainMissionId?fuelRemaining ->
	getFuelRemainingRet.MainMissionId!fuelRemaining ->
	SKIP

SetFuelRemaining_mm = 
	setFuelRemaining.MainMissionId?newFuelRemaining ->
	set_fuelRemaining.MainMissionId!newFuelRemaining ->
	SKIP

GetAltitude_mm = 
	getAltitudeCall?Schedulable!MainMissionId ->
	get_altitude.MainMissionId?altitude ->
	getAltitudeRet!Schedulable!MainMissionId!altitude ->
	SKIP

SetAltitude_mm = 
	setAltitude?Schedulable!MainMissionId?newAltitude ->
	set_altitude.MainMissionId!newAltitude ->
	SKIP

GetAirSpeed_mm = 
	getAirSpeedCall.MainMissionId ->
	get_airSpeed.MainMissionId?airSpeed ->
	getAirSpeedRet.MainMissionId!airSpeed ->
	SKIP

SetAirSpeed_mm = 
	setAirSpeed.MainMissionId?newAirSpeed ->
	set_airSpeed.MainMissionId!newAirSpeed ->
	SKIP

GetEmergencyOxygen_mm = 
	getEmergencyOxygenCall.MainMissionId ->
	get_emergencyOxygen.MainMissionId?emergencyOxygen ->
	getEmergencyOxygenRet.MainMissionId!emergencyOxygen ->
	SKIP

SetEmergencyOxygen_mm = 
	setEmergencyOxygen.MainMissionId?newEmergencyOxygen ->
	set_emergencyOxygen.MainMissionId!newEmergencyOxygen ->
	SKIP

GetHeading_mm = 
	getHeadingCall.MainMissionId ->
	get_heading.MainMissionId?heading->
	getHeadingRet.MainMissionId!heading ->
	SKIP

SetHeading_mm = 
	setHeading.MainMissionId?newHeading ->
	set_heading.MainMissionId!newHeading ->
	SKIP
	

Methods_mm = 
( 
	InitializePhase_mm 
	[] 
	CleanupPhase_mm
	[]
	GetCabinPressure_mm 
	[] 
	SetCabinPressure_mm 
	[] 
	GetFuelRemaining_mm
	[] 
	SetFuelRemaining_mm 
	[] 
	GetAltitude_mm 
	[] 
	SetAltitude_mm 
	[] 
	GetAirSpeed_mm 
	[] 
	SetAirSpeed_mm 
	[] 
	GetEmergencyOxygen_mm 
	[] 
	SetEmergencyOxygen_mm 
	[] 
	GetHeading_mm 
	[] 
	SetHeading_mm
) ; Methods_mm
  


--Mode Changer
channel get_modesLeft : SchedulableID.{1..3}
channel set_modesLeft : SchedulableID.{1..3}

channel get_currentMode : SchedulableID.MissionID
channel set_currentMode : SchedulableID.MissionID




nametype ModeChangerStateSync = 
	{|get_modesLeft, set_modesLeft, get_currentMode, set_currentMode |}

ACModeChangerApp = 
(
  Methods_mc
    [|ModeChangerStateSync|] 
  ModeChangerState_mc(3, nullMissionId) 
) \ModeChangerStateSync
/\ (end_sequencer_app.ACModeChangerId -> SKIP)


ModeChangerState_mc(modesLeft, currentMode) =
(
	get_modesLeft.ACModeChangerId!modesLeft ->
	ModeChangerState_mc(modesLeft, currentMode)
)
[]
(
	set_modesLeft.ACModeChangerId?newModesLeft ->
	ModeChangerState_mc(newModesLeft, currentMode)
)
[]
(
	get_currentMode.ACModeChangerId!currentMode ->
	ModeChangerState_mc(modesLeft, currentMode)
)
[]
(
	set_currentMode.ACModeChangerId?newCurrentMode ->
	ModeChangerState_mc(modesLeft, newCurrentMode)
)

GetNextMission_mc = 
    getNextMissionCall.ACModeChangerId -> 
    get_currentMode.ACModeChangerId?currentMode ->
	getNextMissionRet.ACModeChangerId!currentMode ->
	SKIP
	
AdvanceMode_mc =
	get_modesLeft.ACModeChangerId?modesLeft ->
	if modesLeft == 3 then 
    (  
		set_modesLeft.ACModeChangerId!2 -> 
		set_currentMode.ACModeChangerId!TakeOffModeId ->
		SKIP
	)
    else
    (
    	
	    if modesLeft == 2 then 
	    (  
			set_modesLeft.ACModeChangerId!1 -> 
			set_currentMode.ACModeChangerId!CruiseModeId ->
			SKIP
		)
	    else
		(  
			if modesLeft == 1 then 
			(
				set_modesLeft.ACModeChangerId!0 -> 
				set_currentMode.ACModeChangerId!LandModeId ->
				SKIP
			)
			else
			(
				set_currentMode.ACModeChangerId!nullMissionId ->
				SKIP
			)
		)
    )		





Methods_mc = 
( 
	GetNextMission_mc	
	[]
	AdvanceMode_mc
	
) ; Methods_mc





--- Environment Monitor

channel checkEnvironment : SchedulableID.Bool

EnvironmentMonitorApp =
(
	Methods_em
)
/\ (end_periodicEventHandler_app.EnvironmentMonitorId -> SKIP)

Methods_em =
	handlerAsyncEvent_em ; Methods_em

handlerAsyncEvent_em =
	handleAsyncEventCall.EnvironmentMonitorId -> 
	setCabinPressure.MainMissionId!0 ->
	setEmergencyOxygen.MainMissionId!0 ->
	setFuelRemaining.MainMissionId!0 ->
    handleAsyncEventRet.EnvironmentMonitorId ->
    SKIP  


--- Control Handler

channel handleControls : SchedulableID

ControlHandlerApp =
(
	Methods_ch
)
/\ (end_aperiodicEventHandler_app.ControlHandlerId -> SKIP)

Methods_ch =
	handlerAsyncEvent_ch ; Methods_ch

handlerAsyncEvent_ch =
	handleAsyncEventCall.ControlHandlerId -> 
		handleControls.ControlHandlerId ->
    handleAsyncEventRet.ControlHandlerId ->
    SKIP  

--- CommunicationsHandler

channel handleComms : SchedulableID

CommunicationsHandlerApp =
(
	Methods_comh
)
/\ (end_aperiodicEventHandler_app.CommunicationsHandlerId -> SKIP)

Methods_comh =
	handlerAsyncEvent_comh ; Methods_comh

handlerAsyncEvent_comh =
	handleAsyncEventCall.CommunicationsHandlerId -> 
		handleComms.CommunicationsHandlerId ->
    handleAsyncEventRet.CommunicationsHandlerId ->
    SKIP 


--FlightSensorsMonitor
FlightSensorsMonitorApp =
(
	Methods_fsm
)
/\ (end_periodicEventHandler_app.FlightSensorsMonitorId -> SKIP)

Methods_fsm =
	handlerAsyncEvent_fsm ; Methods_fsm

handlerAsyncEvent_fsm =	
	handleAsyncEventCall.FlightSensorsMonitorId -> 
	setAirSpeed.MainMissionId!2 ->
	setAltitude.FlightSensorsMonitorId.MainMissionId!2 ->
	setHeading.MainMissionId!2 ->
    handleAsyncEventRet.FlightSensorsMonitorId ->
    SKIP  


-- TakeOffMission

channel get_abort : MissionID.Bool
channel set_abort : MissionID.Bool

channel get_landingGearDeployed : MissionID.Bool
channel set_landingGearDeployed : MissionID.Bool

channel abort : MissionID
channel stowLandingGear : SchedulableID.MissionID
channel isLandingGearDeployedCall : SchedulableID.MissionID
channel isLandingGearDeployedRet : SchedulableID.MissionID.Bool
channel deployLandingGear : SchedulableID.MissionID 

nametype TakeOffMissionStateSync = {| get_abort, set_abort, get_landingGearDeployed, set_landingGearDeployed  |}

TakeOffMissionApp = 
(
	Methods_tom
	[| TakeOffMissionStateSync |]	
	TakeOffMissionState(false,true)
	 
) \ TakeOffMissionStateSync
/\ (end_mission_app.TakeOffModeId -> SKIP )


TakeOffMissionState(abortVar, landingGearDeployed) =
((
	get_abort.TakeOffModeId!abortVar->
	TakeOffMissionState(abortVar, landingGearDeployed)
)
[]
(
	set_abort.TakeOffModeId?newAbortVar ->
	TakeOffMissionState(newAbortVar, landingGearDeployed)
)	
[]
(
	get_landingGearDeployed.TakeOffModeId!landingGearDeployed ->
	TakeOffMissionState(abortVar, landingGearDeployed)	
)
[]
(
	set_landingGearDeployed.TakeOffModeId?newLandingGearDeployed ->
	TakeOffMissionState(abortVar, newLandingGearDeployed)	
))

InitializePhase_tom = 
  initializeCall.TakeOffModeId  -> 

  register!TakeOffMonitorId!TakeOffModeId -> 
  register!TakeOffFailureHandlerId!TakeOffModeId -> 
  register!LandingGearHandler1Id!TakeOffModeId ->  
   
  initializeRet.TakeOffModeId -> 
  SKIP

CleanupPhase_tom = 
 cleanupMissionCall.TakeOffModeId ->
 get_abort.TakeOffModeId?abortVar ->
 cleanupMissionRet.TakeOffModeId!abortVar ->
	SKIP

Abort_tom =
	abort.TakeOffModeId ->
	set_abort.TakeOffModeId!true ->
	SKIP

StowLandingGear_tom =
	stowLandingGear?schedulable!TakeOffModeId ->
	set_landingGearDeployed.TakeOffModeId!false ->
	SKIP

IsLandingGearDeployed_tom =
	isLandingGearDeployedCall?schedulable!TakeOffModeId ->
	get_landingGearDeployed.TakeOffModeId?landingGearDeployed ->
	isLandingGearDeployedRet!schedulable!TakeOffModeId!landingGearDeployed ->
	SKIP
	
DeployLandingGear_tom =
	deployLandingGear?schedulable!TakeOffModeId ->
	set_landingGearDeployed.TakeOffModeId!true ->
	SKIP


Methods_tom = 
( 
	InitializePhase_tom 
	[] 
	CleanupPhase_tom
	[]
	Abort_tom
	[]
	StowLandingGear_tom
	[]
	DeployLandingGear_tom
	[]
	IsLandingGearDeployed_tom
) ; Methods_tom


-- TakeOffMonitor

TakeOffMonitorApp(takeOffAltitude, landingGearHandler) =
(
	Methods_tomon(takeOffAltitude, landingGearHandler)
)
/\ (end_periodicEventHandler_app.TakeOffMonitorId -> SKIP)

Methods_tomon(takeOffAltitude, landingGearHandler) =
	handlerAsyncEvent_tomon(takeOffAltitude, landingGearHandler) ; Methods_tomon(takeOffAltitude, landingGearHandler)

handlerAsyncEvent_tomon(takeOffAltitude, landingGearHandler) =
	handleAsyncEventCall.TakeOffMonitorId -> 
	getAltitudeCall.TakeOffMonitorId.MainMissionId ->
	getAltitudeRet.TakeOffMonitorId.MainMissionId?altitude ->
	(
		if altitude > takeOffAltitude then
		(

			release.landingGearHandler ->
			requestTermination.TakeOffModeId.TakeOffMonitorId ->
			SKIP
		)
		else
			SKIP
	)
	;		
    handleAsyncEventRet.TakeOffMonitorId ->
    SKIP  


-- TakeOffFailureHandler

channel continueAndLand : MissionID

TakeOffFailureHandlerApp(threshold) =
(
	Methods_tofh(threshold)
)
/\ (end_aperiodicEventHandler_app.TakeOffFailureHandlerId -> SKIP)

Methods_tofh(threshold) =
	handlerAsyncEvent_tofh(threshold) ; Methods_tofh(threshold)

handlerAsyncEvent_tofh(threshold) =
	handleAsyncEventCall.TakeOffFailureHandlerId -> 
	getAirSpeedCall.MainMissionId ->
	getAirSpeedRet.MainMissionId?currentSpeed ->
	(
		if currentSpeed < threshold then
		(				
			abort.TakeOffModeId ->
			requestTermination.TakeOffModeId.TakeOffFailureHandlerId -> 
			SKIP
		)		
		else
			continueAndLand.TakeOffModeId ->
			SKIP	
	)
	;
    handleAsyncEventRet.TakeOffFailureHandlerId ->
    SKIP  



-- LandingGearHandler1



LandingGearHandlerApp1 =
(
	Methods_lgh1
)
/\ (end_aperiodicEventHandler_app.LandingGearHandler1Id -> SKIP)

Methods_lgh1 =
	handlerAsyncEvent_lgh1 ; Methods_lgh1

handlerAsyncEvent_lgh1 =
	handleAsyncEventCall.LandingGearHandler1Id -> 
	isLandingGearDeployedCall.LandingGearHandler1Id.TakeOffModeId ->
	isLandingGearDeployedRet.LandingGearHandler1Id.TakeOffModeId?landingGearIsDeployed ->
	(
		if landingGearIsDeployed == true then
		(	
			stowLandingGear.LandingGearHandler1Id.TakeOffModeId ->
			SKIP
		)
		else
		(		
			deployLandingGear.LandingGearHandler1Id.TakeOffModeId ->
			SKIP
		)
	)
	;
	requestTermination.LandModeId.LandingGearHandler1Id  ->
    handleAsyncEventRet.LandingGearHandler1Id ->
    SKIP 


-- CruiseMission





CruiseMissionApp = 
( 
	Methods_cm	
) 
/\ (end_mission_app.CruiseModeId -> SKIP )


InitializePhase_cm = 
  initializeCall.CruiseModeId  -> 

  register!NavigationMonitorId!CruiseModeId ->   
     
  register!BeginLandingHandlerId!CruiseModeId ->   

  initializeRet.CruiseModeId -> 
  SKIP

CleanupPhase_cm = 
 cleanupMissionCall.CruiseModeId ->
 cleanupMissionRet.CruiseModeId!True ->
 SKIP

Methods_cm = 
( 
	InitializePhase_cm
	[] 
	CleanupPhase_cm	
) ; Methods_cm


-- NavigationMonitor
NavigationMonitorApp =
(
	Methods_nm
)
/\ (end_periodicEventHandler_app.NavigationMonitorId -> SKIP)

Methods_nm =
	handlerAsyncEvent_nm ; Methods_nm

handlerAsyncEvent_nm =
	handleAsyncEventCall.NavigationMonitorId -> 

	getHeadingCall.MainMissionId ->
	getHeadingRet.MainMissionId?heading ->
	getAirSpeedCall.MainMissionId ->
	getAirSpeedRet.MainMissionId?airSpeed ->
	getAltitudeCall.NavigationMonitorId.MainMissionId ->
	getAltitudeRet.NavigationMonitorId.MainMissionId?airSpeed ->

    handleAsyncEventRet.NavigationMonitorId ->
    SKIP  



--BeginLandingHandler

channel beginLanding : SchedulableID

BeginLandingHandlerApp =
(
	Methods_blh
)
/\ (end_aperiodicEventHandler_app.BeginLandingHandlerId -> SKIP)

Methods_blh =
	handlerAsyncEvent_blh ; Methods_blh

handlerAsyncEvent_blh =
	beginLanding.BeginLandingHandlerId ->
	release.BeginLandingHandlerId ->
	handleAsyncEventCall.BeginLandingHandlerId -> 
	requestTermination.CruiseModeId.BeginLandingHandlerId ->
    handleAsyncEventRet.BeginLandingHandlerId ->
    SKIP  





-- LandMission

channel updateGroundDistance : MissionID.{50}

LandMissionApp = 
( 
	Methods_lam	
)
/\ (end_mission_app.LandModeId -> SKIP )

InitializePhase_lam = 
  initializeCall.LandModeId  -> 

  register!GroundDistanceMonitorId!LandModeId ->   
  register!LandingGearHandler2Id!LandModeId -> 
  register!SafeLandingHandlerId!LandModeId -> 
  register!InstrumentLandingSystemMonitorId!LandModeId -> 

  initializeRet.LandModeId -> 
  SKIP

CleanupPhase_lam = 
 cleanupMissionCall.LandModeId ->
 cleanupMissionRet.LandModeId!True ->
 SKIP

StowLandingGear_lam =
	stowLandingGear?schedulable!TakeOffModeId ->
	set_landingGearDeployed.TakeOffModeId!false ->
	SKIP

IsLandingGearDeployed_lam =
	isLandingGearDeployedCall?schedulable!TakeOffModeId ->
	get_landingGearDeployed.TakeOffModeId?landingGearDeployed ->
	isLandingGearDeployedRet.schedulable.TakeOffModeId!landingGearDeployed ->
	SKIP
	
DeployLandingGear_lam =
	deployLandingGear?schedulable!TakeOffModeId ->
	set_landingGearDeployed.TakeOffModeId!true ->
	SKIP



Methods_lam = 
( 
	InitializePhase_lam
	[] 
	CleanupPhase_lam
	[]
	StowLandingGear_lam
	[]
	IsLandingGearDeployed_lam
	[]
	DeployLandingGear_lam
) ; Methods_lam


--GroundDistanceMonitor

GroundDistanceMonitorApp(readingOnGround) =
(
	Methods_gdm(readingOnGround)
)
/\ (end_periodicEventHandler_app.GroundDistanceMonitorId -> SKIP)

Methods_gdm(readingOnGround) =
	handlerAsyncEvent_gdm(readingOnGround) ; Methods_gdm(readingOnGround)

handlerAsyncEvent_gdm(readingOnGround) =
	handleAsyncEventCall.GroundDistanceMonitorId -> 
	getAltitudeCall.GroundDistanceMonitorId.MainMissionId ->
	getAltitudeRet.GroundDistanceMonitorId.MainMissionId?distance -> 
	(	
		if distance == readingOnGround then
		(
			requestTermination.LandModeId.GroundDistanceMonitorId ->
			SKIP
		)
		else
			SKIP
	)
	;	
    handleAsyncEventRet.GroundDistanceMonitorId ->
    SKIP  


-- LandingGearHandler2

LandingGearHandlerApp2 =
(
	Methods_lgh2
)
/\ (end_aperiodicEventHandler_app.LandingGearHandler2Id -> SKIP)

Methods_lgh2 =
	handlerAsyncEvent_lgh2 ; Methods_lgh2

handlerAsyncEvent_lgh2 =
	handleAsyncEventCall.LandingGearHandler2Id -> 
	isLandingGearDeployedCall.LandingGearHandler2Id.LandModeId ->
	isLandingGearDeployedRet.LandingGearHandler2Id.LandModeId?landingGearIsDeployed ->
	(
		if landingGearIsDeployed == true then
		(	
			stowLandingGear.LandingGearHandler2Id.LandModeId ->
			SKIP
		)
		else
		(		
			deployLandingGear.LandingGearHandler2Id.LandModeId ->
			SKIP
		)
	)
	;
	requestTermination.LandModeId.LandingGearHandler2Id  ->
    handleAsyncEventRet.LandingGearHandler2Id ->
    SKIP 

-- InstrumentLandingSystemMonitor
channel checkILS : {InstrumentLandingSystemMonitorId}

InstrumentLandingSystemMonitorApp =
(
	Methods_tlsm
)
/\ (end_periodicEventHandler_app.InstrumentLandingSystemMonitorId -> SKIP)

Methods_tlsm =
	handlerAsyncEvent_tlsm ; Methods_tlsm

handlerAsyncEvent_tlsm =
	handleAsyncEventCall.InstrumentLandingSystemMonitorId -> 
	checkILS.InstrumentLandingSystemMonitorId ->
    handleAsyncEventRet.InstrumentLandingSystemMonitorId ->
    SKIP  



-- SafeLandingHandler

channel PullUp : {SafeLandingHandlerId}
channel ContinueLanding : {SafeLandingHandlerId}

SafeLandingHandlerApp(threshold) =
(
	Methods_slh(threshold)
)
/\ (end_aperiodicEventHandler_app.SafeLandingHandlerId -> SKIP)

Methods_slh(threshold) =
	handlerAsyncEvent_slh(threshold) ; Methods_slh(threshold)

handlerAsyncEvent_slh(threshold) =
	handleAsyncEventCall.SafeLandingHandlerId -> 
	getAltitudeCall.SafeLandingHandlerId.MainMissionId ->
	getAltitudeRet.SafeLandingHandlerId.MainMissionId?altitude ->
	(	
		if altitude < threshold then
		(	
			PullUp.SafeLandingHandlerId ->
			SKIP			
		)
		else
		(
			ContinueLanding.SafeLandingHandlerId ->
			SKIP
		)
	) ;
    handleAsyncEventRet.SafeLandingHandlerId ->
    SKIP  





nametype MTAppSync = {| runCall, runRet,  end_managedThread_app |}


nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

Aircraft =
(  
	ACSafelet
	|||
	MainMissionSequencerApp
	|||
	((
			(
				(
					MainMissionApp
						[|{|setAirSpeed, setAltitude, setHeading|}|]
					FlightSensorsMonitorApp
				)
				[|{|setCabinPressure, setEmergencyOxygen, setFuelRemaining|}|]
				EnvironmentMonitorApp
			)
			|||
			ACModeChangerApp
			|||
			ControlHandlerApp
			|||
			CommunicationsHandlerApp
			|||
			(
				(
					(
						TakeOffMissionApp
						[|  {| requestTermination|} |]	
						TakeOffMonitorApp(0, LandingGearHandler1Id)
					)
					[|  {| stowLandingGear.LandingGearHandler1Id, deployLandingGear.LandingGearHandler1Id|} |]	
					LandingGearHandlerApp1
				)
				[|  {| abort, requestTermination|} |]	
				TakeOffFailureHandlerApp(0)
			)
		)
		[|{| getHeadingCall, getHeadingRet, getAirSpeedCall, getAirSpeedRet, getAltitudeCall.NavigationMonitorId, getAltitudeRet.NavigationMonitorId |}|]
		NavigationMonitorApp
		|||
		(
			CruiseMissionApp	
			 [|{| requestTermination |}|]
			BeginLandingHandlerApp
		)
	)
	[|{|getAltitudeCall.SafeLandingHandlerId, getAltitudeRet.SafeLandingHandlerId, getAltitudeCall.GroundDistanceMonitorId,getAltitudeRet.GroundDistanceMonitorId  |}|]
	(
		(
			SafeLandingHandlerApp(0)
			|||	
			GroundDistanceMonitorApp(0)
		)
			[|{|requestTermination|}|]
		(
			LandMissionApp
				[|{| stowLandingGear.LandingGearHandler2Id, deployLandingGear.LandingGearHandler2Id|}|]
			LandingGearHandlerApp2
		)
	)	
	|||
	InstrumentLandingSystemMonitorApp	
)	


nametype APEHSync = {| release |}
nametype OSEHSync = {| descheduleCall, descheduleRet, scheduleNextRelease, getNextReleaseTimeCall, getNextReleaseTimeRet |}

Program(topLevelSequencerIDs, tier0, tier1IDs) = 
(  
	ClustereAndTieredFramework(topLevelSequencerIDs, tier0, tier1IDs)
		[| Union({SafeltAppSync, MissionSequencerAppSync, MissionAppSync, MTAppSync, OSEHSync , APEHSync, 
		 {|end_mission_app, setCeilingPriority, requestTermination, end_oneshotEventHandler_app, end_aperiodicEventHandler_app, end_periodicEventHandler_app, handleAsyncEventCall, handleAsyncEventRet|}})  |]
	Aircraft	
)

TestProgram = 
	Program(
				{MainMissionSequencerId},  

				{ (MainMissionId , ({ACModeChangerId},{(ControlHandlerId, aperiodic, 0, nullSchedulableId), (CommunicationsHandlerId, aperiodic, 0, nullSchedulableId) }, {},  {(EnvironmentMonitorId, 1, 0, 0, nullSchedulableId), (FlightSensorsMonitorId, 1, 0, 0, nullSchedulableId)}, {} )  )   },

				{ (TakeOffModeId, ({}, {(LandingGearHandler1Id, aperiodic, 0, nullSchedulableId),(TakeOffFailureHandlerId, aperiodic, 0, nullSchedulableId) }, {},  { (TakeOffMonitorId, 1, 0, 0, nullSchedulableId)}, {})  )
				,		(CruiseModeId, ({},{(BeginLandingHandlerId, aperiodic, 0, nullSchedulableId)},  {},  {(NavigationMonitorId, 1, 0, 0, nullSchedulableId)}, {})  ), 
							(LandModeId, ({},{(LandingGearHandler2Id, aperiodic, 0, nullSchedulableId), (SafeLandingHandlerId, aperiodic, 0, nullSchedulableId)},  {},  {(InstrumentLandingSystemMonitorId, 1, 0, 0, nullSchedulableId), (GroundDistanceMonitorId, 1, 0, 0, nullSchedulableId)}, {})  )
				}			    																																			               
            )


OneTierFramework(topLevelSequencerIDs, tier0IDS) =
(  
  SafeletTier(topLevelSequencerIDs)
    [|TierSync|]
  Tier0(tier0IDS) 
)


TakeOffCluster =
	ACSafelet
	|||
	MainMissionSequencerApp
	|||
	(
	(
	(
		TakeOffMissionApp
		[|  {| requestTermination|} |]	
		TakeOffMonitorApp(0, LandingGearHandler1Id)
	)
		[|  {| stowLandingGear.LandingGearHandler1Id, deployLandingGear.LandingGearHandler1Id|} |]	
		LandingGearHandlerApp1
	)
		[|  {| abort, requestTermination|} |]	
	TakeOffFailureHandlerApp(0)
	)

TestTakeOffMission =
(
	OneTierFramework({MainMissionSequencerId}, { (TakeOffModeId, ({}, {(LandingGearHandler1Id, aperiodic, 0, nullSchedulableId),(TakeOffFailureHandlerId, aperiodic, 0, nullSchedulableId) }, {},  { (TakeOffMonitorId, 1, 0, 0, nullSchedulableId)}, {})  )})
		[| Union({SafeltAppSync, MissionSequencerAppSync, MissionAppSync, MTAppSync, OSEHSync , APEHSync, 
		 {|end_mission_app, setCeilingPriority, requestTermination, end_oneshotEventHandler_app, end_aperiodicEventHandler_app, end_periodicEventHandler_app, handleAsyncEventCall, handleAsyncEventRet|}})  |]
	TakeOffCluster

)

assert sbisim(diamond(TestProgram)) ; Loop :[ deadlock free [FD] ]
--assert sbisim(diamond(TestProgram)) :[ divergence free ]
--assert sbisim(diamond(TestProgram)) :[ deterministic  [FD] ]