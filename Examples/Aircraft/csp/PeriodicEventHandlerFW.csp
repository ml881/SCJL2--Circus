--PERIODIC EVENT HANDLER FW

-- PEH Channels

channel get_missedReleases : SchedulableID.num
channel set_missedReleases : SchedulableID.num
channel get_periodicTerminating : SchedulableID.Bool
channel set_periodicTerminating : SchedulableID.Bool 
channel end_periodicEventHandlerState : SchedulableID
channel release_complete_PEH : SchedulableID.num
channel reset_periodicEventHandlerState : SchedulableID
channel end_periodicEventHandler_app : SchedulableID

nametype ReleaseSync_PEH =  {|release, end_releases |}
nametype  PTCSYnc =  {| get_periodicTerminating, set_periodicTerminating |}


 nametype PEHStateSync = {|get_controllingMission, set_controllingMission, 
                          get_applicationTerminating, set_applicationTerminating, 
                          get_missedReleases,set_missedReleases, 
                          get_periodicTerminating, set_periodicTerminating,
                          get_startTime, set_startTime,
                          end_periodicEventHandlerState, reset_periodicEventHandlerState|}


nametype PEHFWChanSet = union(
  union(PEHStateSync, ManagedSchedulableFWChanSet),
  {|done_safeletFW, end_periodicEventHandler_app, 
get_missedReleases,set_missedReleases,
get_periodicTerminating,set_periodicTerminating,
end_periodicEventHandlerState,release_complete_PEH,
done_toplevel_sequencer, circwait, end_releases |}  )
  


PeriodicEventHandlerFW(schedulable, period, startTime, deadline, deadlineMissHandler) =
( 
  PeriodicEventHandlerBehaviour(schedulable, startTime, period, deadline, deadlineMissHandler)
    [|PEHStateSync|]
  PeriodicEventHandlerState(schedulable, nullMissionId, False, period, startTime, deadline, deadlineMissHandler, 0, False)
)\PEHStateSync

PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating) =
(
  (
    get_controllingMission.schedulable!controllingMission ->
    PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating)
  )
  []
  (
    set_controllingMission.schedulable?newControllingMission ->
    PeriodicEventHandlerState(schedulable, newControllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating)
   )
  []
  (
    get_applicationTerminating.schedulable!applicationTerminating ->
    PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating)
  )
  []
  (
    set_applicationTerminating.schedulable?newApplicationTerminating ->
    PeriodicEventHandlerState(schedulable, controllingMission, newApplicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating)
  )
  []
  (
    get_missedReleases.schedulable!missedReleases ->
    PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating)
  )
  []
  (
    set_missedReleases.schedulable?newMissedReleases ->
     PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, newMissedReleases, periodicTerminating)
  )
  []
  (
    get_periodicTerminating.schedulable!periodicTerminating ->
    PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating)
  )
  []
  (
    set_periodicTerminating.schedulable?newPeriodicTerminating ->
    PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, newPeriodicTerminating)
  )
  []
  ( 
    get_startTime.schedulable!startTime ->
    PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, startTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating) 
  )
  []
  (
    set_startTime.schedulable?newStartTime ->
    PeriodicEventHandlerState(schedulable, controllingMission, applicationTerminating, period, newStartTime, deadline, deadlineMissHandler, missedReleases, periodicTerminating) 
  )
  []
  (
    reset_periodicEventHandlerState.schedulable ->
    PeriodicEventHandlerState(schedulable, nullMissionId, False, period, startTime, deadline, deadlineMissHandler, 0, False)
  )
  []
  (
    end_periodicEventHandlerState.schedulable ->
    SKIP
  )
)

PeriodicEventHandlerBehaviour(schedulable, startTime, period, deadline, deadlineMissHandler) =

(
    Start_PEH(schedulable) ;
    get_applicationTerminating.schedulable?applicationTerminating ->
    (
      if applicationTerminating == False then  
      (
           Execute_PEH(schedulable, startTime, period, deadline, deadlineMissHandler)  ; 
           Cleanup_PEH(schedulable) ; 
           reset_periodicEventHandlerState.schedulable ->
           PeriodicEventHandlerBehaviour(schedulable, startTime, period, deadline, deadlineMissHandler)
      )
      else  
         end_periodicEventHandlerState.schedulable ->
         end_periodicEventHandler_app.schedulable ->
         SKIP 
    ) 
)

Start_PEH(schedulable) =
 (
   Register_PEH(schedulable) --;
   --Activate_PEH(schedulable)
 ) 
 []
 (
  done_safeletFW ->
 set_applicationTerminating.schedulable!True ->
    SKIP
)
[]
 (
    activate_schedulables?someMissionID ->
    Start_PEH(schedulable)
 ) 
 []
 (
    done_toplevel_sequencer ->
    set_applicationTerminating.schedulable!True ->
    SKIP
  )  

Register_PEH(schedulable) =
   register.schedulable?controllingMission ->
   Activate_PEH(schedulable, controllingMission)

Activate_PEH(schedulable, controllingMission) =
    activate_schedulables.controllingMission ->
    SKIP

Execute_PEH(schedulable, startTime, period, deadline, deadlineMissHandler) =
circwait.startTime ->    
(
  ( 
    (
      if deadlineMissHandler != nullSchedulableId then
        RunningWithDeadlineDetection(schedulable, period, deadline, deadlineMissHandler)
      else 
        Running(schedulable, period)         
    )
    []
    (
      end_releases.schedulable ->
      signalTerminationRet.schedulable ->
      SKIP
    )
  )  
    [|  {|end_releases, signalTerminationRet|} |] 
  SignalTermination_PEH(schedulable)
)\{|end_releases|}
  

Running(schedulable, period)  =
( 
  (release.schedulable -> PeriodicClock(schedulable, period))
    [| ReleaseSync_PEH |] 
  Release_PEH(schedulable,0)
)

RunningWithDeadlineDetection(schedulable, period, deadline, deadlineMissHandler) =
(
  Running(schedulable, period)
    [| {|release_complete, end_releases|} |] 
  DeadlineClock_PEH(schedulable, 0, deadline, period, deadlineMissHandler) 
)

PeriodicClock(schedulable, period) =
 (
  ( 
    circwait.period ->
    (  
      (
        release.schedulable ->
        PeriodicClock(schedulable, period)
      )
      []
      (
        end_releases.schedulable ->
       SKIP 
      )
    )
  )
  []
  (
    end_releases.schedulable ->
    SKIP 
  )      
)
 

Release_PEH(schedulable, index) =
get_missedReleases.schedulable?missedReleases ->
(
  if missedReleases == 0 then 
  (
    release.schedulable ->
    handleAsyncEventCall.schedulable ->
    SKIP
  )
  else 
  (
    handleAsyncEventCall.schedulable ->
    if missedReleases-1 < 0 then
      SKIP
    else
      set_missedReleases.schedulable!(missedReleases -1) ->
      SKIP
  )
);
(
  (
    handleAsyncEventRet.schedulable ->
    release_complete_PEH.schedulable.index ->
    SKIP
  ) 
    [| {|handleAsyncEventRet|} |] 
  FireCatcher(schedulable) 
) ;
(
  (
    get_periodicTerminating.schedulable?periodicTerminating:({False}) ->
    if index + 1 > maxNum then 
      signalTerminationRet.schedulable ->
      SKIP 
    else
      Release_PEH(schedulable, index + 1)
   )
  []
  (
    get_periodicTerminating.schedulable?periodicTerminating:({True}) ->
    end_releases.schedulable ->
    signalTerminationRet.schedulable ->
    SKIP
  )
)

FireCatcher(schedulable) = 
(
  (
    release.schedulable ->
    get_missedReleases.schedulable?missedReleases ->
    if missedReleases +1 > maxNum then
     SKIP
    else
      set_missedReleases.schedulable!(missedReleases +1) ->
      FireCatcher(schedulable)
  )
  []
  (
    handleAsyncEventRet.schedulable -> 
    SKIP
  )
)

DeadlineClock_PEH(schedulable, index, deadline, period, deadlineMissHandler) =
(
  (
  (   
    (
        
        circwait.deadline ->
        handleAsyncEventRet.deadlineMissHandler ->
        release_complete_PEH.schedulable.index ->
        SKIP
      ) 
      []
      (
        release_complete_PEH.schedulable.index ->
        SKIP
      )
    )
    |||
    (
      (
        circwait.period ->
        if index +1 > maxNum then
          SKIP
        else 
          DeadlineClock_PEH(schedulable, index + 1, deadline, period, deadlineMissHandler)
      )       
    )
) 
/\ 
  (
    end_releases.schedulable ->   
    SKIP
  )
)

SignalTermination_PEH(schedulable) =
  signalTerminationCall.schedulable ->
  set_periodicTerminating.schedulable!True ->
  end_releases.schedulable ->
  signalTerminationRet.schedulable ->
  done_schedulable.schedulable ->
  SKIP

Cleanup_PEH(schedulable) =
  cleanupSchedulableCall.schedulable ->
  cleanupSchedulableRet.schedulable ->
  SKIP

--assert PeriodicEventHandlerFW(schedulableA, 1, 0, 2, nullSchedulableId); Loop :[ deadlock free [FD] ]
--assert PeriodicEventHandlerFW(schedulableA, 1, 0, 2, nullSchedulableId) :[ divergence free ]
--assert PeriodicEventHandlerFW(schedulableA, 1, 0, 2, nullSchedulableId) :[ deterministic  [FD] ]