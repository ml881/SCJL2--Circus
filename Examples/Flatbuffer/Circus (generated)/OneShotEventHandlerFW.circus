\begin{zsection}
  \SECTION ~ OneShotEventHandlerFW ~ \parents ~ MissionChan, SchedulableChan, SchedulableId,\\
   \t1 MissionId, MissionIds,TopLevelMissionSequencerChan, OneShotEventHandlerChan,\\
   \t1 SafeletMethChan, FrameworkChan, AperiodicParameters
\end{zsection}
%
\begin{circus}
  \circprocess OneShotEventHandlerFW ~ \circdef ~ schedulable : SchedulableID; startTime: JTime ; aperiodicParameters : AperiodicParameters \circspot ~\circbegin
\end{circus}
%
\begin{schema}{\circstateignore State}
  controllingMission : MissionID\\
  applicationTerminating : \boolean \\  
  deadline : JTime \\
  deadlineMissHandler : SchedulableID \\
\end{schema}
%
\begin{parser}
\begin{circusaction}
\circstate State
\end{circusaction}
\end{parser}
%
\begin{schema}{Init}
 State~'\\  
 \where
  controllingMission' = nullMissionId\\
  applicationTerminating' = \false \\  
  deadline' = deadlineOfA(aperiodicParameters) \\
  deadlineMissHandler' = missHandlerOfA(aperiodicParameters) \\

\end{schema}
%
\begin{circusaction}
Start \circdef\\
\t1  ( 
  	Register \circseq \\
  	Activate
     )  \\
\t1  \extchoice\\
\t1  (
  	activate\_schedulables?someMissionID \then \\
  	Start
  ) \\
\t1  \extchoice \\
\t1 (
	done\_toplevel\_sequencer \then \\ 
	applicationTerminating := \true  \\ 
    )
\end{circusaction}
%
\begin{circusaction}
Register \circdef \\
\t1    register~.~schedulable~?~mID \then \\
\t1    controllingMission := mID 
\end{circusaction}
%  
\begin{circusaction}
Activate ~ \circdef ~ \\
\t1    activate\_schedulables~.~controllingMission \then \\
\t1    \Skip
\end{circusaction}
%
\begin{circusaction}
Execute \circdef  \\
\t1 (
		(
			(
				Run
					\t1   \lpar \emptyset | MethodsSync | \emptyset \rpar\\
				Methods\\
			)
			\lpar \emptyset | \lchanset end\_releases \rchanset | \emptyset \rpar\\
		SignalTermination 
	  ) \\
	  	\t1   \lpar \emptyset| STCSync | \{startTime\} \rpar\\
		StartTimeController
	)
\end{circusaction}
%
\begin{circusaction}
Run \circdef \\
\t1	\circif deadlineMissHandler = nullSchedulableId \circthen \\
\t2 	( 
					ScheduleOrWait \\
						\lpar \emptyset | ReleaseSync | \emptyset \rpar \\
					Release  
	) \\
\t1 \circelse deadlineMissHandler \neq nullSchedulableId \circthen \\
\t2 (
		(
			ScheduleOrWait \\
				\lpar \emptyset | ReleaseSync | \emptyset \rpar \\
			Release  
		)
			\lpar \emptyset | DeadlineSync | \emptyset \rpar \\
			DeadlineClock	
	)
\t1 \circfi
\end{circusaction}
%
\begin{circusaction}
ScheduleOrWait \circdef\\ 
\t1 get\_startTime~.~schedulable~?~startTime \then \\
\t1 \circif startTime != NULL \circthen \\
\t2        Scheduled \\
\t1  \circelse startTime = NULL \circthen\\
\t2      NotScheduled \\
\t1 \circfi
\end{circusaction}
%
\begin{circusaction}
Release \circdef \\
\t1 ( 
    		releaseCall~.~schedulable \then \\
    		releaseRet~.~schedulable \then  \\ 
	    	release\_complete~.~schedulable \then \\
    		Release
\t1  ) \\
\t1 \extchoice\\
\t1 (
		reschedule\_handler~.~schedulable~?~newStartTime \then \\
		set\_startTime~.~schedulable~!~newStartTime \then \\
		Release
    )\\
\t1 \extchoice\\
\t1 (
		end\_releases.schedulable \then \\
		\Skip
     )
\end{circusaction}
%
\begin{circusaction}
DeadlineClock \circdef \\

\t1 releaseCall~.~schedulable \then \\ 
\t1	(
		(		
			(
				%\circwait valueOf(deadline) \circseq \\
				fire~.~deadlineMissHandler \then \\				
				DeadlineClock 
			) \\
			\extchoice \\
			(
	 			release\_complete~.~schedulable \then \\
				DeadlineClock 
			)	
			\extchoice \\
			(
	 			deschedule\_handler~.~schedulable \then \\
				DeadlineClock 
			)
		)
	)	
    \circseq%%\circinterrupt 
    (
    		end\_releases~.~schedulable \then \\
    		%release\_complete~.~schedulable \then \\
	    	\Skip
    )
\end{circusaction}
% 
\begin{circusaction}
Scheduled \circdef \\
\t1 get\_startTime~.~schedulable~?~startTime \then \\
\t1 (
  ( 
		%\circwait valueOf(startTime) \\    
		releaseCall~.~schedulable \then \\
	 	NotScheduled
     )\\ 
   \\ \circseq %%\circinterrupt \\
  (  
     	( 
      		deschedule\_handler~.~schedulable \then \\
      		NotScheduled\\
      	)\\
     	\extchoice \\
     	( 
     		reschedule\_handler~.~schedulable~?~newStartTime \then \\
     		set\_startTime~.~schedulable~!~newStartTime \then \\
     		Scheduled\\   
     	) \\
   )   \\
 )
\end{circusaction}
%
\begin{circusaction}
NotScheduled \circdef\\
\t1    ( 
        	deschedule\_handler~.~schedulable \then \\
        	NotScheduled\\
       )\\
\t1    \extchoice\\
\t1    ( 
       		reschedule\_handler~.~schedulable~?~newStartTime \then \\
       		set\_startTime~.~schedulable~!~newStartTime \then \\
       		Scheduled \\       
        )     \\
\t1    \extchoice\\
\t1    (
		end\_releases~.~schedulable \then \\
		\Skip
	)\\
\end{circusaction}
%
\begin{circusaction}
Methods \circdef \\
\t1 (
	Deschedule \circseq \\
	Methods
    ) \\
\t1 \extchoice \\
\t1 (
	GetNextReleaseTime \circseq \\
	Methods
    ) \\
\t1 \extchoice \\
\t1 (
	ScheduleNextRelease\circseq \\
	Methods
    ) \\
\t1 \extchoice\\
\t1 (
	end\_releases~.~schedulable \then \\
	\Skip
     )
\end{circusaction}
%
\begin{circusaction}
Deschedule \circdef \\
\t1  \circvar wasScheduled : \boolean \circspot\\
\t1  descheduleCall~.~schedulable \then\\
\t1  deschedule\_handler.schedulable \then\\
\t1  get\_startTime~.~schedulable~?~startTime \then \\
\t1 (
 \circif startTime = NULL \circthen\\
\t2 	wasScheduled := \false \\
 \circelse startTime \neq NULL \circthen\\
\t2	wasScheduled := \true \\
 \circfi \circseq\\
  set\_startTime~.~schedulable~!~NULL \then \\ 
  descheduleRet~.~schedulable~!~wasScheduled \then \\
  \Skip
 )
\end{circusaction}
%
\begin{circusaction}
GetNextReleaseTime \circdef \\
\t1 getNextReleaseTimeCall~.~schedulable \then \\
\t1 get\_startTime~.~schedulable~?~startTime \then \\
\t1 getNextReleaseTimeRet~.~schedulable~!~startTime \then \\
\t1 \Skip
\end{circusaction}
%
%Since jInt is defiend to only allow natural numbers, a negative cannot be supplied here
\begin{circusaction}
ScheduleNextRelease \circdef \\
\t1 scheduleNextRelease~.~schedulable~?~newStartTime \then \\
\t1 set\_startTime~.~schedulable~!~newStartTime \then \\
\t1 \circif newStartTime = NULL \circthen \\
\t2 	(
		deschedule\_handler.schedulable \then \\
		\Skip\\
	)
\t1 \circelse newStartTime \neq NULL \circthen \\
\t2	(
 		reschedule\_handler~!~schedulable~!~newStartTime \then \\
 		\Skip \\
 	)	
\t1 \circfi
\end{circusaction}
%
\begin{circusaction}
SignalTermination \circdef\\
\t1 signalTerminationCall~.~schedulable \then\\
\t1 end\_releases~.~schedulable \then\\
\t1 signalTerminationRet~.~schedulable \then\\
\t1 done\_schedulable~.~schedulable \then\\
\t1 \Skip
\end{circusaction}
%
\begin{circusaction}
StartTimeController \circdef \\
\t1 (
	get\_startTime~.~schedulable~!~startTime \then \\
	StartTimeController
    )\\
\t1 \extchoice \\
\t1 (
	set\_startTime~.~schedulable~?~newStartTime \then \\
	StartTimeController
    )
\end{circusaction}
%
\begin{circusaction}
Cleanup \circdef \\
\t1	cleanupSchedulableCall~.~schedulable \then\\
\t1	cleanupSchedulableRet~.~schedulable \then \Skip  
\end{circusaction}
%
\begin{circusaction}
\circspot ( \circmu X \circspot (  \lschexpract Init \rschexpract \circseq Start \circseq\\
( \circif applicationTerminating = \false \circthen \\ 
		\t1 (Execute \circseq Cleanup \circseq X)\\
	\circelse applicationTerminating = \true \circthen \\ 
		\t1 \Skip\\ 
\circfi ) ) )
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}