\begin{zsection}
  \SECTION ~ FlatBufferMissionApp ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan , FlatBufferMissionClass \\

  \t1 , \\
ObjectChan
, 

ObjectIds
, 

ThreadIds


, FlatBufferMissionMethChan
\end{zsection}
%\begin{circus}
%\circchannelset FlatBufferMissionAppSync == \\
%	\lchanset initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet  \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset FlatBufferMissionAppChanSet == \\
% \lchanset initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,

%    register~.~Reader~.~FlatBufferMission 
%    register~.~Writer~.~FlatBufferMission 
%\rchanset
%\end{circus}

\begin{circus}
\circprocess FlatBufferMissionApp \circdef  \circbegin
\end{circus}

\begin{schema}{State}
 % this : \circreftype FlatBufferMissionClass\\ 
\end{schema}
%                                            
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
%\where
 % this' = \circnew FlatBufferMissionClass()\\ 
\end{schema}

\begin{circusaction}
InitializePhase \circdef \\
\circblockopen
initializeCall~.~FlatBufferMissionID \then \\
  
register~!~ReaderID~!~FlatBufferMissionID \then   \\
register~!~WriterID~!~FlatBufferMissionID \then   \\


initializeRet~.~FlatBufferMissionID \then \\
  \Skip
\circblockclose 
\end{circusaction}
 
\begin{circusaction}
CleanupPhase \circdef  \\
\circblockopen
cleanupMissionCall~.~FlatBufferMissionID \then \\

cleanupMissionRet~.~FlatBufferMissionID~!~\true \then \\
 \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
bufferEmptyMeth \circdef
\circvar ret : \boolean \circspot
\\
\circblockopen
bufferEmptyCall~.~FlatBufferMissionID
\then \\
%ret := this~.~bufferEmpty()  \circseq  \\

bufferEmptyRet~.~FlatBufferMissionID~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}
\begin{circusaction}
cleanUpMeth \circdef
\circvar ret : \boolean \circspot
\\
\circblockopen
cleanUpCall~.~FlatBufferMissionID
\then \\
%ret := this~.~cleanUp()  \circseq  \\

cleanUpRet~.~FlatBufferMissionID~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}
%
\begin{circusaction}
writeSyncMeth \circdef
\\
\circblockopen
writeCall~.~FlatBufferMissionID~?~caller~?~thread~?~update  \then \\
startSyncMeth~.~FlatBufferMissionObjectID~!~thread \then \\
\circblockopen

lockAcquired~.~FlatBufferMissionObjectID~.~thread \then \\

      \circblockopen

      \circblockopen \circmu X \circspot \\ \circblockopen \circvar loopVar : \boolean \circspot loopVar :=~(\false%bufferEmpty() 
	)
      \circseq \\ \circif ~ (loopVar = \true) ~ \circthen ~ \\ \t1 \circblockopen waitCall~.~FlatBufferMissionObjectID~!~thread \then \\ waitRet~.~FlatBufferMissionObjectID~!~thread \then \\ \Skip \circblockclose \circseq X \\ \circelse ~ ~ (loopVar = \lnot \true) \circthen \Skip \\ \circfi \circblockclose \circblockclose \\ 

               \circseq \\ 




               \Skip%this~.~buffer :=update
 

               \circseq \\ 

               notify~.~FlatBufferMissionObjectID~!~thread \then  \\ \Skip
 

        \circblockclose  

 \circseq  \\
 endSyncMeth~.~FlatBufferMissionObjectID~.~thread \then  \\

 writeRet~.~FlatBufferMissionID~.~caller~.~thread \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}
\begin{circusaction}
readSyncMeth \circdef
\circvar ret : \num \circspot
\\
\circblockopen
readCall~.~FlatBufferMissionID~?~caller~?~thread
 \then \\
\circblockopen
startSyncMeth~.~FlatBufferMissionObjectID~.~thread \then \\
lockAcquired~.~FlatBufferMissionObjectID~.~thread \then \\

      \circblockopen

      \circblockopen \circmu X \circspot \\ \circblockopen \circvar loopVar : \boolean \circspot loopVar :=~\true%bufferEmpty()
      \circseq \\ \circif ~ (loopVar = \true) ~ \circthen ~ \\ \t1 \circblockopen waitCall~.~FlatBufferMissionObjectID~!~thread \then \\ waitRet~.~FlatBufferMissionObjectID~!~thread \then \\ \Skip \circblockclose \circseq X \\ \circelse ~ ~ (loopVar = \lnot \true) \circthen \Skip \\ \circfi \circblockclose \circblockclose \\ 

               \circseq \\ 

               \circvar out : \num \circspot out := 7%this~.~buffer ~
 

               \circseq \\ 




%this~.~buffer :=0
 
\Skip
               \circseq \\ 

               notify~.~FlatBufferMissionObjectID~!~thread \then  \\ \Skip
 

               \circseq \\ 

  ret := out
 

        \circblockclose  

 \circseq  \\
 endSyncMeth~.~FlatBufferMissionObjectID~.~thread \then  \\

 readRet~.~FlatBufferMissionID~.~caller~.~thread~!~ret \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}
%

\begin{circusaction}
Methods \circdef 
\circblockopen
	InitializePhase \\
	\extchoice \\
	CleanupPhase \\
%
\extchoice \\
	bufferEmptyMeth \\ 
\extchoice \\
	cleanUpMeth \\ 
%
	\extchoice \\
	writeSyncMeth \\	
	\extchoice \\
	readSyncMeth \\	
%
\circblockclose 
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
% \circinterrupt (end\_mission\_app~.~FlatBufferMission \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
