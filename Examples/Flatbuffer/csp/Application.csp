
--include "Framework.csp"

include "FrameworkProcess.csp"

--**********************************************
--******************APLICATION******************
--**********************************************

-- SAFELET: MY APP

nametype SafeltAppSync = 
    {| getSequencerCall, getSequencerRet,initializeApplicationCall, initializeApplicationRet, end_safelet_app |}


FlatBufferApp  = 
	(
	 	Methods_s 
	)		
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =  
     initializeApplicationCall -> 
     initializeApplicationRet ->
     SKIP

GetSequencer_s = 
	getSequencerCall -> 
	getSequencerRet!FlatBufferSequencerId ->
	SKIP

Methods_s = 
 ( 
	GetSequencer_s
	[] 
	InitializeApplication_s 
 ); Methods_s


--TOP LEVEL SEQUENCER: MY SEQUENCER

channel get_sequencer_done : {FlatBufferSequencerId}.Bool
channel set_sequencer_done : {FlatBufferSequencerId}.Bool

nametype MissionSequencerAppStateSync = {| get_sequencer_done, set_sequencer_done |}

nametype MissionSequencerAppSync = {|getNextMissionCall, getNextMissionRet,end_sequencer_app|}



FlatBufferSequencerApp = 
(
  Methods_fbms
    [|MissionSequencerAppStateSync|] 
  DoneController_fbms(False) 
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.FlatBufferSequencerId -> SKIP)
   

DoneController_fbms(done) =
(
	get_sequencer_done.FlatBufferSequencerId!done ->
	DoneController_fbms(done)
)
[]
(
	set_sequencer_done.FlatBufferSequencerId?newDone ->
	DoneController_fbms(newDone)
)


GetNextMission_fbms = 
    getNextMissionCall.FlatBufferSequencerId -> 
	get_sequencer_done.FlatBufferSequencerId?done ->
	(
	  if done == False then
	  (
		set_sequencer_done.FlatBufferSequencerId!True ->
		getNextMissionRet.FlatBufferSequencerId!FlatBufferMissionId  ->
		SKIP
      )
	  else 
	  (
		getNextMissionRet.FlatBufferSequencerId!nullMissionId ->
		SKIP
	  )
    )

Methods_fbms = 
 (
	GetNextMission_fbms 
 ) ; Methods_fbms 



--FlatBUfferMission

nametype MissionAppSync = {|initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet   |}

FlatBufferMissionApp = 
( 
	(
		(Methods_fbm )
		/\ 
		(end_mission_app.FlatBufferMissionId -> SKIP )
	) 
)

InitializePhase_fbm = 
	initializeCall.FlatBufferMissionId   -> 

	register!ReaderId!FlatBufferMissionId  -> 
  	register!WriterId!FlatBufferMissionId  -> 
  	
  
	initializeRet.FlatBufferMissionId  -> 
	SKIP

CleanupPhase_fbm = 
 cleanupMissionCall.FlatBufferMissionId  ->
 cleanupMissionRet.FlatBufferMissionId?false ->
 SKIP

Methods_fbm = 
( 
	InitializePhase_fbm
	[] 
	CleanupPhase_fbm
) ; Methods_fbm
  


-- Writer

WriterApp = 
(
	Methods_w
)
/\ (end_managedThread_app.WriterId -> SKIP)

Methods_w =
	Run_w

Run_w =
	runCall.WriterId -> 
		
	runRet.WriterId ->
	SKIP


-- Reader

ReaderApp = 
(
	Methods_r
)
/\ (end_managedThread_app.ReaderId -> SKIP)

Methods_r =
	Run_r

Run_r =
	runCall.ReaderId -> 
		
	runRet.ReaderId ->
	SKIP


nametype MTAppSync = {| runCall, runRet,  end_managedThread_app |}


nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

FlatBuffer =
(  
	FlatBufferApp
	|||
	FlatBufferSequencerApp
	|||
	FlatBufferMissionApp
	|||
	ReaderApp
	|||
	WriterApp	
)	


--nametype APEHSync = {| release.Tier0APEHId |}
--nametype OSEHSync = {| descheduleCall, descheduleRet, scheduleNextRelease, getNextReleaseTimeCall, getNextReleaseTimeRet |}

Program(topLevelSequencerIDs, tier0) = 
(  
	ClustereAndTieredFramework(topLevelSequencerIDs, tier0)
		[| Union({SafeltAppSync, MissionSequencerAppSync, MissionAppSync, MTAppSync, --OSEHSync , --APEHSync, 
		 {|end_mission_app, end_managedThread_app, setCeilingPriority, requestTermination, handleAsyncEventCall, handleAsyncEventRet|}})  |]
	FlatBuffer	
)

TestProgram = 
	Program(
				{FlatBufferSequencerId},
				{ (FlatBufferMissionId , ({}, {}, {},  {}, {WriterId, ReaderId})  )   }	                 
            )

assert sbisim(diamond(TestProgram)) ; Loop :[ deadlock free [FD] ]
assert sbisim(diamond(TestProgram)) :[ divergence free ]
assert sbisim(diamond(TestProgram)) :[ deterministic  [FD] ]