nametype SafeletTierSync = {|start_toplevel_sequencer, done_toplevel_sequencer, done_safeletFW |}

SafeletTier(topLevelMissionSequencerIDs) =
(
  SafeletFW
  [|SafeletTierSync|]
  TopLevelMissionSequencers(topLevelMissionSequencerIDs)
)  

nametype MissionSync = {| done_safeletFW, done_toplevel_sequencer,  
                   signalTerminationCall, signalTerminationRet, activate_schedulables, done_schedulable, 
                   cleanupSchedulableCall, cleanupSchedulableRet, register |} 


Tier(missionIDs,  (schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads) ) =
 (
    Missions(missionIDs)
    [|MissionSync|]
    Schedulables(schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads)
)

Tier0(missionIDs, managedSchedulableIDs  )=
(
	Tier(missionIDs, managedSchedulableIDs )
)


NestedTier(missionIDs, managedSchedulableIDs) =
(  
  Tier(missionIDs, managedSchedulableIDs)
) 


NestedTiers(nestedTierIDs) =
  ||| (missionIDs, managedSchedulableIDs) : nestedTierIDs @ NestedTier(missionIDs, managedSchedulableIDs)


TieredFramework(topLevelSequencerIDs, tier0MissionIDs, tier0SchedulableIDS, nestedTierIDs) =
(  
  SafeletTier(topLevelSequencerIDs)
    [|TierSync|]
  (
    Tier0(tier0MissionIDs,tier0SchedulableIDS) 
      [| {|start_mission.missionB, done_mission.missionB, initializeRet.missionB, done_toplevel_sequencer, done_safeletFW, requestTermination.missionB |} |]
    NestedTiers( nestedTierIDs )
  )
)

SimpleTieredFramework = 
   TieredFramework(   {TopLevelSequencerId},
		              {missionA}, 
		              ({FirstMissionSequencerID},{(schedulableA, aperiodic, 2, nullSchedulableId)}, {},  {}, {schedulableB}),
		              {
						({missionB}, 
						({}, {}, {},  {}, {schedulableC}))
					  }
                  )

