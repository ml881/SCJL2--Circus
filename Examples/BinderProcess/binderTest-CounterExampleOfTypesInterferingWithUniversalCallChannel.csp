limit = 1
nametype num = {0..limit}

datatype missionID = MissionAID
datatype schedulableID = SO1ID | SO2ID
datatype methodName = XuXuA | XuXuB

channel methodCall : methodName.missionID.schedulableID
channel methodRet : methodName.missionID.schedulableID.num
channel BmethodCall : methodName.missionID.schedulableID
channel BmethodRet : methodName.missionID.schedulableID.num
channel work : num
channel end
channel a


binderSync = {| BmethodCall, BmethodRet, methodCall, methodRet, end|}


MissionA(i) =
  XuXuAAction(i)
  |||
  XuXUBAction

XuXuAAction(i) =
(
  methodCall.XuXuA.MissionAID?caller ->
  work.i ->
  methodRet.XuXuA.MissionAID.caller!i ->
  if i < limit then
    XuXuAAction(i+1)
  else
    end ->
    SKIP
)

XuXUBAction =
    methodCall.XuXuB.MissionAID?caller ->
    methodRet.XuXuB.MissionAID.caller!MissionAID ->
    SKIP


SO1 =
  (
    BmethodCall.XuXuA.MissionAID.SO1ID ->

    BmethodRet.XuXuA.MissionAID.SO1ID?value ->
    work!value ->
    end ->
    SKIP
)

SO2 =
  (
    BmethodCall.XuXuA.MissionAID.SO2ID ->

    BmethodRet.XuXuA.MissionAID.SO2ID?value ->
    work!value ->
    end ->
    SKIP
)



Application =
(
  MissionA(0)
 [|{|end|}|]
  (SO1
  [|{|end|}|]
  SO2)
)

Binder =
(

( ||| s: schedulableID @  ||| m : missionID @ (   BinderMethodAction(m, s)))



  /\ (end -> SKIP)

)


BinderMethodAction(m, s) =
  BmethodCall.m?s ->

(  methodCall.m.s->
  methodRet.m.s?x ->
  BmethodRet.m.s!x->
SKIP)

Loop = a -> Loop

Network = (end -> SKIP) [| {|end|} |] (Application [| binderSync |] Binder)

assert Network ; Loop :[ deadlock free [FD] ]
assert Network :[ divergence free ]
assert Network :[ deterministic  [FD] ]
