limit = 1
nametype num = {0..limit}

datatype missionID = MissionAID
datatype schedulableID = SO1ID | SO2ID


channel XuXuCall : missionID.schedulableID
channel XuXuRet : missionID.schedulableID.num
channel Binder_XuXuCall : missionID.schedulableID
channel Binder_XuXuRet : missionID.schedulableID.num

channel getIdCall : missionID.schedulableID
channel getIdRet : missionID.schedulableID.missionID
channel Binder_getIdCall : missionID.schedulableID
channel Binder_getIdRet : missionID.schedulableID.missionID


channel work : num
channel end
channel a


binderSync = {| Binder_XuXuCall, Binder_XuXuRet, XuXuCall, XuXuRet, getIdCall, getIdRet, Binder_getIdCall, Binder_getIdRet, end|}


MissionA(i) =
  (
  XuXuAction(i)
  |||
  GetID
  )/\ end ->
  SKIP


XuXuAction(i) =
(
  XuXuCall.MissionAID?caller ->
  work.i ->
  XuXuRet.MissionAID.caller!i ->
  if i < limit then
    XuXuAction(i+1)
  else
  XuXuAction(i)
)

GetID =
(
  getIdCall.MissionAID?caller ->
  getIdRet.MissionAID!caller!MissionAID ->
GetID
)

SO1 =
  (
  Binder_XuXuCall.MissionAID.SO1ID ->

    Binder_XuXuRet.MissionAID.SO1ID?value ->
    work!value ->
    end ->
    SKIP
)

SO2 =
  (
    Binder_XuXuCall.MissionAID.SO2ID ->

  Binder_XuXuRet.MissionAID.SO2ID?value ->

  Binder_getIdCall.MissionAID.SO2ID ->
  Binder_getIdRet.MissionAID.SO2ID?missionIDIS ->
    work!value ->
    end ->
    SKIP
)



Application =
(
  MissionA(0)
 [|{|end|}|]
  (SO1
  [|{|end|}|]
  SO2)
)

Binder =
(

( ||| s: schedulableID @  ||| m : missionID @ (   BinderXUXUMethodAction(m, s)))
|||
( ||| s: schedulableID @  ||| m : missionID @ (   BinderGetIDMethodAction(m, s)))




)  /\ (end -> SKIP)


BinderGetIDMethodAction(m,s) =
Binder_getIdCall.m.s ->
getIdCall.m.s ->
getIdRet.m.s?id ->
Binder_getIdRet.m.s!id ->
SKIP


BinderXUXUMethodAction(m, s) =
Binder_XuXuCall.m.s ->

(  XuXuCall.m.s->
  XuXuRet.m.s?x ->
  Binder_XuXuRet.m.s!x->
SKIP)

Loop = a -> Loop

Network = (end -> SKIP) [| {|end|} |] (Application [| binderSync |] Binder)

assert Network ; Loop :[ deadlock free [FD] ]
assert Network :[ divergence free ]
assert Network :[ deterministic  [FD] ]
