channel a
Loop = a-> Loop

--SchedulablelMissionSequencer

--SMS Types
datatype SchedulableID = nullSchedulableId|schedulableA|schedulableB  
datatype MissionID = nullMissionId|missionA|missionB
datatype ExceptionType = interruptedException | illegalMonitorStateException | illegalArgumentException | illegalThreadStateException | illegalStateException | ceilingViolationException
nametype Bit = {0,1}
datatype ObjectID = objectA | objectB


--SMS CHANNELS

  channel  throw : ExceptionType 
  channel  done_toplevel_sequencer
  channel  register : SchedulableID . MissionID 
  channel  start_mission :  MissionID.SchedulableID
  channel  signalTerminationCall : SchedulableID
  channel  signalTerminationRet : SchedulableID
  channel  cleanupSchedulableCall : SchedulableID
  channel  cleanupSchedulableRet : SchedulableID 
  channel  activate_schedulables : MissionID
  channel  initializeRet : MissionID
  channel  done_mission : MissionID.Bool
  channel  done_schedulable : SchedulableID
  channel  end_sequencer_app:SchedulableID
  channel  end_methods : SchedulableID
  channel  end_terminations : SchedulableID
  channel  getNextMissionCall : SchedulableID
  channel  getNextMissionRet : (SchedulableID . MissionID) 
  channel  requestSequenceTermination : (SchedulableID . Bool) 
  channel  requestTermination : MissionID.SchedulableID
  channel  sequenceTerminationPendingCall : SchedulableID   
  channel  sequenceTerminationPendingRet : (SchedulableID . Bool) 



channel get_currentMission  : SchedulableID.MissionID
channel set_currentMission : SchedulableID.MissionID
channel get_continue : SchedulableID.Bool
channel set_continueAbove : SchedulableID.Bool
channel set_continueBelow : SchedulableID.Bool
channel get_controllingMission : SchedulableID.MissionID
channel set_controllingMission : SchedulableID.MissionID
channel get_applicationTerminating : SchedulableID.Bool
channel set_applicationTerminating : SchedulableID.Bool
channel end_schedulableMissionSequencerState : SchedulableID


  nametype  CCSync  =  {| get_continue,  set_continueBelow, set_continueAbove |} 
  nametype  SchedulableMissionSequencerFWChan  = {| end_sequencer_app, end_methods, end_terminations, get_continue  |}
  nametype  SMSStateSync = {|get_currentMission, set_currentMission, get_continue, set_continueAbove, set_continueBelow,get_controllingMission, set_controllingMission, get_applicationTerminating, set_applicationTerminating, end_schedulableMissionSequencerState |}

-- SchedulableMissionSequencer

SchedulableMissionSequencerFW(sequencer)  =  
  SchedulableMissionSequencerState(sequencer, nullMissionId, True, True, nullMissionId, False)
    [| SMSStateSync |]
  SchedulableMissionSequencerBehaviour(sequencer)



SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, continueBelow, controllingMission, applicationTerminating) =
	(
		get_currentMission.sequencer!currentMission -> 
		SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, continueBelow, controllingMission, applicationTerminating)
	)
	[]
	(
		set_currentMission.sequencer?newCurrentMission -> 
		SchedulableMissionSequencerState(sequencer, newCurrentMission, continueAbove, continueBelow, controllingMission, applicationTerminating)
	)
    []
	(
		get_continue.sequencer!(continueAbove and continueBelow) ->
		SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, continueBelow, controllingMission, applicationTerminating)
	)
	[]
	(
		set_continueAbove.sequencer?newContinueAbove -> 
		SchedulableMissionSequencerState(sequencer, currentMission, newContinueAbove, continueBelow, controllingMission, applicationTerminating)
	)
	[]
	(
		set_continueBelow.sequencer?newContinueBelow ->
		SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, newContinueBelow, controllingMission, applicationTerminating)
	)
	[]
	(
		get_controllingMission.sequencer!controllingMission ->
		SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, continueBelow, controllingMission, applicationTerminating)
	)
	[]
	(
		set_controllingMission.sequencer?newControllingMission ->
		SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, continueBelow, newControllingMission, applicationTerminating)
	)
	[]
	(
		get_applicationTerminating.sequencer!applicationTerminating ->
		SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, continueBelow, controllingMission, applicationTerminating)
	)
	[]
	(
		set_applicationTerminating.sequencer?newApplicationTerminating ->
		SchedulableMissionSequencerState(sequencer, currentMission, continueAbove, continueBelow, controllingMission, newApplicationTerminating)
	)
	[]
	(
		end_schedulableMissionSequencerState.sequencer ->
		SKIP
	)



SchedulableMissionSequencerBehaviour(sequencer) =
  Start(sequencer) ; 
	get_applicationTerminating.sequencer?applicationTerminating ->
    (if applicationTerminating == False then 
       (Execute(sequencer) ; Cleanup(sequencer) ; SchedulableMissionSequencerBehaviour(sequencer) ) 
     else  
       end_schedulableMissionSequencerState.sequencer -> SKIP 
     )


Start(sequencer) =  
 (
      Register(sequencer) ;
      Activate(sequencer)
    )
 []
 (
    done_toplevel_sequencer -> 
    set_applicationTerminating.sequencer!True ->
	SKIP
  )
 []
 (
    activate_schedulables?someMissionID -> 
    Start(sequencer) 
  ) 



Register(sequencer) = 
 register.sequencer?mID ->
 set_controllingMission.sequencer!mID ->
 SKIP

Activate(sequencer) =
 get_controllingMission.sequencer?controllingMission ->	
 activate_schedulables.controllingMission -> 
 SKIP

Execute(sequencer) = 
(
	( 
	    (
            RunMission(sequencer) ;
            end_methods.sequencer -> 
            SKIP
         )
        [| {| end_methods |} |]
     Methods(sequencer)
    )   
) ; done_schedulable.sequencer -> SKIP



RunMission(sequencer) = 
 GetNextMission(sequencer) ; 
 StartMission(sequencer) ; 
 Continue(sequencer)

GetNextMission(sequencer)  =  
    getNextMissionCall.sequencer -> 
    getNextMissionRet.sequencer?next -> 
    set_currentMission.sequencer!next ->
	SKIP

StartMission(sequencer)  = 
get_currentMission.sequencer?currentMission ->  
   if  currentMission != nullMissionId  then
   (    
      start_mission.currentMission.sequencer ->
      initializeRet.currentMission ->      
      (      
        SignalTermination(sequencer)
         [| {| end_terminations |} |]
        (   
            done_mission.currentMission?continueReturn -> 
            set_continueBelow.sequencer!continueReturn -> 
            end_terminations.sequencer -> 
            SKIP
        ) 
      ) 
  )
  else  
  (
      set_continueBelow.sequencer!False -> 
      SKIP 
  )


Continue(sequencer) = 
	(
		get_continue.sequencer?continue:({True}) -> 
	    RunMission(sequencer) 
	)
	[]	
	(
		get_continue.sequencer?continue:({False}) -> 
        SKIP
	)

SignalTermination(sequencer)  = 
( 
    (end_terminations.sequencer -> SKIP)
    []
    ( 
      signalTerminationCall.sequencer -> 
      set_continueAbove.sequencer!False -> 
	  get_currentMission.sequencer?currentMission ->
      requestTermination.currentMission.sequencer ->  
      signalTerminationRet.sequencer ->      
      SKIP
    ) ; 
    end_terminations.sequencer -> 
    SKIP
 )

Methods(sequencer)  = 
	(
	    SequenceTerminationPending(sequencer) ;
        Methods(sequencer)
    )
    [] 
 	(
    	end_methods.sequencer ->  
     	SKIP
  	)

SequenceTerminationPending(sequencer)  = 
	sequenceTerminationPendingCall.sequencer -> 
	get_continue.sequencer?continue ->
    sequenceTerminationPendingRet.sequencer!continue ->
	SKIP

Cleanup(sequencer)  = 
  cleanupSchedulableCall.sequencer -> 
  cleanupSchedulableRet.sequencer -> 
  Finish(sequencer)


Finish(sequencer) = 
  done_schedulable.sequencer -> 
  SKIP

  
assert SchedulableMissionSequencerFW(schedulableA); Loop :[ deadlock free [FD] ]
assert SchedulableMissionSequencerFW(schedulableA) :[ divergence free ]
assert SchedulableMissionSequencerFW(schedulableA) :[ deterministic  [FD] ]  
