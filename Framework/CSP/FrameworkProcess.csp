include "Framework.csp"


channel nested_start_mission : MissionID.SchedulableID
channel nested_done_mission : MissionID.Bool



TopLevelMissionSequencers(toplevelSequencerIDs) =
([|{| done_safeletFW, done_toplevel_sequencer |}|] ms : toplevelSequencerIDs @ TopLevelMissionSequencerFW(ms)) 
 

Missions(missions) = ([|{| done_safeletFW, done_toplevel_sequencer |}|] m : missions @ MissionFW(m))

CatchBroadcasts =
  (done_safeletFW -> SKIP)
  []
  (done_toplevel_sequencer->SKIP)
  []
  (activate_schedulables?m -> CatchBroadcasts)

SchedulableSequencerFWs(schedulableSequencers) =
if schedulableSequencers != {} then
(
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] sms : schedulableSequencers @ SchedulableMissionSequencerFW(sms) 
)
else
(
  CatchBroadcasts
)

AperiodicEventHandlerFWs(aperiodicEventHanders) =
if aperiodicEventHanders != {} then
(
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] (apeh, type, start, missHandler) : aperiodicEventHanders @ AperiodicEventHandlerFW(apeh, type, start, missHandler) 
)
else
(
  CatchBroadcasts
)

OneShotEventHandlerFWs(oneShotEventHandlers)=
if oneShotEventHandlers != {} then
  (
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] (oseh, start, deadline, missHandler) : oneShotEventHandlers @ OneShotEventHandlerFW(oseh, start, deadline, missHandler ) 
)
else
(
  CatchBroadcasts
)

PeriodicEventHandlerFWs(periodicEventHandlers) =
if periodicEventHandlers != {} then
  (
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] (peh, period, start, deadline, missHandler) : periodicEventHandlers @ PeriodicEventHandlerFW(peh, period, start, deadline, missHandler) 
)
else
(
  CatchBroadcasts
)

ManagedThreadFWs(managedThreads) =
if managedThreads != {} then
  (
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] mt : managedThreads @ ManagedThreadFW(mt) 
)
else
(
  CatchBroadcasts 
)

Schedulables(schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads)=
(
  (
    ( 
      (
        (
          SchedulableSequencerFWs(schedulableSequencers)
              [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
          AperiodicEventHandlerFWs(aperiodicEventHanders)
        )
            [|{|  activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
        OneShotEventHandlerFWs(oneShotEventHandlers)
      )
          [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
      PeriodicEventHandlerFWs(periodicEventHandlers)
      )
          [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
      ManagedThreadFWs(managedThreads)
    )
)



nametype SafeltSync = {| done_safeletFW, start_toplevel_sequencer, done_toplevel_sequencer, register, deregister, checkSchedulable|}

nametype TopLevelMissionSequencerSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

nametype MissionSync = {| done_safeletFW, done_toplevel_sequencer,  
                   signalTerminationCall, signalTerminationRet, activate_schedulables, done_schedulable, 
                   cleanupSchedulableCall, cleanupSchedulableRet, terminationPendingCall, terminationPendingRet, register |} 

Framework(topLeveSequencers,missions,schedulableSequencers,aperiodicEventHanders,oneShotEventHandlers,periodicEventHandlers,managedThreads) =
(
    SafeletFW 
      [| SafeltSync |]
    (  
      TopLevelMissionSequencers(topLeveSequencers)
        [| TopLevelMissionSequencerSync |]
      ( 
        Missions(missions)
          [| MissionSync |]
       Schedulables(schedulableSequencers, aperiodicEventHanders,oneShotEventHandlers,periodicEventHandlers,managedThreads)
    
      )
  )
)

SimpleFramework = Framework({TopLevelSequencerId}, {missionA}, {}, {(schedulableA, aperiodic, 2, nullSchedulableId)}, {},  {}, {schedulableB} )

transparent diamond, sbisim

assert sbisim(diamond(SimpleFramework)) ; Loop :[ deadlock free [FD] ]
assert sbisim(diamond(SimpleFramework)) :[ divergence free ]
assert sbisim(diamond(SimpleFramework)) :[ deterministic  [FD] ]


MissionAndSchedulables = 
( 
    Missions({missionA}) 
      [| MissionSync |]
    Schedulables({}, {(schedulableA, aperiodic, 2, nullSchedulableId)}, {},  {}, {schedulableB} )
)


nametype SafeletTierSync = {|start_toplevel_sequencer, done_toplevel_sequencer, done_safeletFW |}
nametype SafeletTierChan = union(SafeletFWChanSet, TopLevelMissionSequencerFWChanSet)


SafeletTier(topLevelMissionSequencerIDs) =
(
  SafeletFW
  [|SafeletTierSync|]
  TopLevelMissionSequencers(topLevelMissionSequencerIDs)
)  



nametype TierChanSet = Union({ MissionFWCHanSet, SchedulableMissionSequencerFWChanSet, MTFWChanSet, APEHFWChanSet, PEHFWChanSet, OSEHFWChanSet, {|register|} })

Tier(missionIDs,  (schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads) ) =
 (
    Missions(missionIDs)
    [|MissionSync|]
    Schedulables(schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads)
)
-- ({FirstMissionSequencerID},{(schedulableA, aperiodic, 2, nullSchedulableId)}, {},  {}, {schedulableB})
Tier0(missionIDs, managedSchedulableIDs  )=
(
Tier(missionIDs, managedSchedulableIDs )
--[| RouterSync |]  
--Router(missionIDs)
)
--(apeh, type, start, missHandler) : aperiodicEventHanders

nametype RouterSync = {|start_mission, done_mission |}


Router(thisTier)=
(  
(
    start_mission?mission:(thisTier)?sequencer ->
    Router(thisTier) 
  )
  []
  (
    start_mission?mission:(diff(MissionID,thisTier))?sequencer ->
    nested_start_mission!mission!sequencer ->
    Router(thisTier) 
  )
[]
(
  nested_start_mission?mission:(thisTier)?sequencer ->
  start_mission!mission!sequencer ->
  Router(thisTier) 
)
[]
(
  done_mission?mission:(thisTier)?continueSequencer ->
  Router(thisTier) 
)
[]
(
  done_mission?mission:(diff(MissionID,thisTier))?continueSequencer ->
  nested_done_mission!mission!continueSequencer ->
   Router(thisTier) 
)
[]
(
    nested_done_mission?mission:(thisTier)?continueSequencer ->
    done_mission!mission!continueSequencer ->
    Router(thisTier) 
)
)


NestedTier(missionIDs, managedSchedulableIDs) =
(  
  Tier(missionIDs, managedSchedulableIDs)
  --[| RouterSync |]  
  --Router(missionIDs)
) 


NestedTiers(nestedTierIDs) =
  ||| (missionIDs, managedSchedulableIDs) : nestedTierIDs @ NestedTier(missionIDs, managedSchedulableIDs)



nametype TierSync = {|start_mission.missionA, done_mission.missionA, register, deregister, checkSchedulable, done_safeletFW, done_toplevel_sequencer|}

nametype NestedTeirSync = {|start_mission, done_mission, initializeRet, nested_start_mission, nested_done_mission |}




nametype Tier0Chan = union(diff(TierChanSet, {|start_mission, done_mission|}), {|start_mission.missionA.TopLevelSequencerId, done_mission.missionA.True, done_mission.missionA.False |})




nametype NestedTeirChan = union(diff(TierChanSet, {|start_mission, done_mission|}), {|start_mission.missionB.FirstMissionSequencerID, done_mission.missionA.True, done_mission.missionA.False |})
 

TieredFramework(topLevelSequencerIDs, tier0MissionIDs, tier0SchedulableIDS, nestedTierIDs) =
(  
  SafeletTier(topLevelSequencerIDs)
    [|TierSync|]
  (
    Tier0(tier0MissionIDs,tier0SchedulableIDS) 
      [| {|start_mission.missionB, done_mission.missionB, initializeRet.missionB, done_toplevel_sequencer, done_safeletFW, requestTermination.missionB |} |]
    NestedTiers( nestedTierIDs )
  )
)
--Tier0Chan || NestedTeirChan
                  --{}, {(schedulableA, aperiodic, 2, nullSchedulableId)}, {},  {}, {schedulableB}
SimpleTieredFramework = 
  TieredFramework({TopLevelSequencerId},
                  {missionA}, 
                  ({FirstMissionSequencerID},{(schedulableA, aperiodic, 2, nullSchedulableId)}, {},  {}, {schedulableB}),
                  {({missionB}, ({}, {}, {},  {}, {schedulableC}))}
                  )




assert sbisim(diamond(SimpleTieredFramework)) ; Loop :[ deadlock free [FD] ]
assert sbisim(diamond(SimpleTieredFramework)) :[ divergence free ]
assert sbisim(diamond(SimpleTieredFramework)) :[ deterministic  [FD] ]