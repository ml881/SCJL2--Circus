--Aperiocidc EVENT HANDLER FW
 
--APEH TYPES

datatype AperiodicType = aperiodic | aperiodicLong

-- APEH Channels


channel set_pending : SchedulableID . Bool
channel get_pending : SchedulableID . Bool
channel set_data : SchedulableID . num
channel get_data : SchedulableID . num
channel reset_aperiodicEventHandlerState : SchedulableID
channel end_aperiodicEventHandlerState : SchedulableID
channel end_aperiodicEventHandler_app : SchedulableID


channel releaseLong : SchedulableID . num

channel handleAsyncLongEventCall : SchedulableID . num
channel handleAsyncLongEventRet : SchedulableID 


channel scheduleNextRelease : SchedulableID.num 

nametype APEHFWChanSet = union(
  union(ManagedSchedulableFWChanSet, APEHStateSync),
   {|done_safeletFW, releaseLong,release, handleAsyncLongEventCall, handleAsyncEventRet, 
     releaseLong, end_releases, circwait, 
     release_complete, done_schedulable, done_toplevel_sequencer |}  )

nametype DeadlineSync_APEH =  {| end_releases, deschedule_handler, release_complete|}
nametype APEHStateSync = 
  {|get_controllingMission, set_controllingMission, get_applicationTerminating, set_applicationTerminating,
      get_pending, set_pending, get_data, set_data, end_aperiodicEventHandlerState, reset_aperiodicEventHandlerState|}


AperiodicEventHandlerFW(schedulable, aperiodicType, deadline, deadlineMissHandler) =

(
  AperiodicEventHandlerState(schedulable, nullMissionId, False, False, 0, deadline, deadlineMissHandler )
    [|APEHStateSync|]
  AperiodicEventHandlerBehaviour(schedulable,aperiodicType, deadline, deadlineMissHandler)
)\APEHStateSync

AperiodicEventHandlerState(schedulable, controllingMission, applicationTerminating, pending, data, deadline, deadlineMissHandler) =
(
  get_controllingMission.schedulable!controllingMission ->
  AperiodicEventHandlerState(schedulable, controllingMission, applicationTerminating, pending, data, deadline, deadlineMissHandler)
)
[]
(
  set_controllingMission.schedulable?newControllingMission ->
  AperiodicEventHandlerState(schedulable, newControllingMission, applicationTerminating, pending, data, deadline, deadlineMissHandler)
)
[]
(
  get_applicationTerminating.schedulable!applicationTerminating ->
  AperiodicEventHandlerState(schedulable, controllingMission, applicationTerminating, pending, data, deadline, deadlineMissHandler)
)
[]
(
  set_applicationTerminating.schedulable?newApplicationTerminating ->
  AperiodicEventHandlerState(schedulable, controllingMission, newApplicationTerminating, pending, data, deadline, deadlineMissHandler)
)

[]
(
  set_pending.schedulable?newPending ->
  AperiodicEventHandlerState(schedulable, controllingMission, applicationTerminating, newPending, data, deadline, deadlineMissHandler)
 )
[]
(
  get_pending.schedulable!pending ->
  AperiodicEventHandlerState(schedulable, controllingMission, applicationTerminating, pending, data, deadline, deadlineMissHandler)

)
[]
(
  get_data.schedulable!data ->
  AperiodicEventHandlerState(schedulable, controllingMission, applicationTerminating, pending, data, deadline, deadlineMissHandler)

)
[]
(
  set_data.schedulable?newData ->
  AperiodicEventHandlerState(schedulable, controllingMission, applicationTerminating, pending, newData, deadline, deadlineMissHandler)

)
[]
(
  reset_aperiodicEventHandlerState.schedulable ->
  AperiodicEventHandlerState(schedulable, nullMissionId, False, False, 0, deadline, deadlineMissHandler )
)
[]
(
  end_aperiodicEventHandlerState.schedulable ->
  SKIP
)


AperiodicEventHandlerBehaviour(schedulable,aperiodicType, deadline, deadlineMissHandler) =

(   
  Start_APEH(schedulable) ;
  get_applicationTerminating.schedulable?applicationTerminating ->
  ( 
    if applicationTerminating == False then 
    (
      Execute_APEH(schedulable,aperiodicType, deadline, deadlineMissHandler) ; 
      Cleanup_APEH(schedulable)  ; 
      reset_aperiodicEventHandlerState.schedulable ->
      AperiodicEventHandlerBehaviour(schedulable,aperiodicType, deadline, deadlineMissHandler)
    )
    else 
      end_aperiodicEventHandlerState.schedulable ->
      end_aperiodicEventHandler_app.schedulable ->
      SKIP 
    )
)


Start_APEH(schedulable) =
  (
    Register_APEH(schedulable) --; 
   -- Activate_APEH(schedulable)
  )  
  []
  (
  done_safeletFW ->
  set_applicationTerminating.schedulable!True ->
  SKIP
)
[]
  (
    activate_schedulables?someMissionID -> 
    Start_APEH(schedulable)
  ) 
  [] 
  ( 
  done_toplevel_sequencer -> 
  set_applicationTerminating.schedulable!True ->
  SKIP
  )


Register_APEH(schedulable) = 
    register.schedulable?controllingMission -> 
    Activate_APEH(schedulable, controllingMission)  
  

Activate_APEH(schedulable, controllingMission)  =  
 -- get_controllingMission.schedulable?controllingMission ->
    activate_schedulables.controllingMission -> 
    SKIP


Execute_APEH(schedulable,aperiodicType, deadline, deadlineMissHandler) =  
if deadlineMissHandler != nullSchedulableId then 
( 
  (
    (
      if aperiodicType == aperiodic then 
        Ready_APEH(schedulable)
      else 
        ReadyLong(schedulable)    
    )
      [| union(DeadlineSync_APEH, {|release.schedulable|}) |]
    DeadlineClock_APEH(schedulable, deadline, deadlineMissHandler)
  )
    [|{| end_releases |}|]
  SignalTermination_APEH(schedulable)
)
else
(    
  (
    if aperiodicType == aperiodic then 
      Ready_APEH(schedulable)
    else 
      ReadyLong(schedulable)    
  )
    [|{| end_releases |}|]
  SignalTermination_APEH(schedulable)
)\{| end_releases |}

DeadlineClock_APEH(schedulable, deadline, deadlineMissHandler) = 
(
 release.schedulable ->  
  (
    (   
      (
        circwait.deadline -> 
        release.deadlineMissHandler ->         
        DeadlineClock_APEH(schedulable, deadline, deadlineMissHandler)
      ) 
      [] 
      (
        release_complete.schedulable -> 
        DeadlineClock_APEH(schedulable, deadline, deadlineMissHandler)
      )       
    )
  )
) 
    /\
    (
        end_releases.schedulable -> 
        release_complete.schedulable -> 
        SKIP
    )

Ready_APEH(schedulable) = 
(
  release.schedulable -> 
  handleAsyncEventCall.schedulable -> 
  Release_APEH(schedulable, False)
)
[]
(
  end_releases.schedulable ->
  SKIP
)

ReadyLong(schedulable) = 
 (  
  releaseLong.schedulable?data -> 
  --set_data.schedulable!data ->
  handleAsyncLongEventCall.schedulable.data -> 
  ReleaseLong(schedulable, data, False) 
 )
 []
 (
  end_releases.schedulable ->
  SKIP
 )


SignalTermination_APEH(schedulable) = 
  ( 
    signalTerminationCall.schedulable ->
    end_releases.schedulable ->
    signalTerminationRet.schedulable ->
    done_schedulable.schedulable ->
    SKIP 
  )

Release_APEH(schedulable, pending) =  
  
  ( 
    release.schedulable -> 
    --set_pending.schedulable!True ->
    Release_APEH(schedulable, True)
  )
  []
  (
    handleAsyncEventRet.schedulable -> 
    --get_pending.schedulable?pending ->
    if pending == True then
    ( 
     -- set_pending.schedulable!False ->
      release_complete.schedulable -> 
      handleAsyncEventCall.schedulable -> 
      Release_APEH(schedulable, False)
    )
    else 
       Ready_APEH(schedulable)   
  )
  []
  (
    end_releases.schedulable -> 
    SKIP
  )

ReleaseLong(schedulable, data, pending ) =  
 ( 
    releaseLong.schedulable?data -> 
   -- set_data.schedulable!data ->
   -- set_pending.schedulable!True ->
    ReleaseLong(schedulable, data, True)
  )
  []
  (
    handleAsyncLongEventRet.schedulable -> 
   -- get_pending.schedulable?pending ->
    if pending == True then
    ( 
     -- set_pending.schedulable!False ->
      release_complete.schedulable -> 
     -- get_data.schedulable?data ->
      handleAsyncLongEventCall.schedulable.data -> 
      ReleaseLong(schedulable, data, False)
    )
    else 
       ReadyLong(schedulable) 
    
  )
   []
  (
    end_releases.schedulable -> 
    SKIP
  )

Cleanup_APEH(schedulable) = 
 cleanupSchedulableCall.schedulable ->
 cleanupSchedulableRet.schedulable -> 
 SKIP 


assert AperiodicEventHandlerFW(schedulableA, aperiodic, 2, nullSchedulableId) ; Loop :[ deadlock free [FD] ]
assert AperiodicEventHandlerFW(schedulableA, aperiodic, 2, nullSchedulableId) :[ divergence free ]
assert AperiodicEventHandlerFW(schedulableA, aperiodic, 2, nullSchedulableId) :[ deterministic  [FD] ] 