--Object
--Models java.lang.Object

datatype WaitType = wait | waitForObject


	channel waitCall : ObjectID . ThreadID
	channel timedWaitCall : ObjectID . ThreadID . JTime 
	channel waitRet : ObjectID . ThreadID
	channel waitForObjectCall : ObjectID . ThreadID . JTime 
	channel waitForObjectRet : ObjectID . ThreadID . Bool 
	channel notify : ObjectID . ThreadID
	channel notifyAll : ObjectID . ThreadID	

	channel unlock_Monitor : ObjectID . ThreadID
	channel relock: ObjectID . ThreadID
	channel relock_this : ObjectID . ThreadID 
	channel startSynchMeth : ObjectID . ThreadID 
	channel lockAcquired : ObjectID . ThreadID 
	channel endSyncMeth : ObjectID . ThreadID
	channel cancel_wait_timer : ObjectID . ThreadID 
	channel start_timer : ObjectID . ThreadID . PriorityLevel . JTime
	channel lock_request : ObjectID . ThreadID 
	channel assignLock : ObjectID  
	channel add_to_wait : ObjectID . ThreadID . PriorityLevel . WaitType 
	channel remove_from_wait : ObjectID . ThreadID . PriorityLevel 
	channel remove_most_eligible_from_wait : ObjectID 
	channel removed_thread : ObjectID . ThreadID . WaitType 
	channel get_lockedBy : ObjectID . ThreadID 
	channel get_waitQueue : ObjectID . PriorityQueue 
	channel reset_lockedBy : ObjectID 
	channel fully_unlock : ObjectID --.SchedulableID.Int 
	channel increment_locks : ObjectID 
	channel decrement_locks : ObjectID 
	channel get_ceilingPriority : ObjectID . PriorityLevel  
	channel start_waitForObject_timer : ObjectID . ThreadID  . PriorityLevel . JTime 
	channel get_waitForObjectThreads : ObjectID . Set(ThreadID)

channel add_to_queue_for_lock :ObjectID.ThreadID.PriorityLevel
channel assign_eligible :ObjectID
channel add_to_wait_queue :ObjectID.ThreadID.PriorityLevel.WaitType
channel remove_thread_from_wait_queue :ObjectID.ThreadID.PriorityLevel 
channel remove_most_eligible_from_wait_queue :ObjectID



channel set_locks : ObjectID.Int
channel get_locks : ObjectID.Int
channel set_lockedBy : ObjectID.ThreadID
channel get_queueForLock : ObjectID.PriorityQueue

nametype ObjectStateSync = 
	{|set_lockedBy, increment_locks, decrement_locks,get_locks,get_waitQueue, get_waitForObjectThreads,
	  fully_unlock, add_to_queue_for_lock, assign_eligible, add_to_wait_queue, 
		remove_thread_from_wait_queue, remove_most_eligible_from_wait_queue    |}

ObjectFW(object) =
( 
	ObjectState(object, EmptyPriorityQueue, nullThreadId, 0, EmptyThreadMap, EmptyPriorityQueue,  {}) 
		[| ObjectStateSync|]
	Execute_Object(object, {}, MaxPriority, EmptyPriorityQueue  ,EmptyThreadMap ,0,nullThreadId)
) \ObjectStateSync
/\(done_toplevel_sequencer -> SKIP)



ObjectState(object, waitQueue, lockedBy, locks, previousLocks, queueForLock,  waitForObjectThreads) =
 --WaitQueueController =  
-- (
--	add_to_wait.object?someThread?priorityLevel?waitType -> 
--	 AddToWaitQueue  ; 
--	ObjectState(waitQueue, lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)
-- ) 
-- []
-- (                                                                                                                                   
-- 	remove_from_wait.object?waitingThread?priorityLevel ->  
-- 	 RemoveThreadFromWaitQueue   ;  	
--	ObjectState(waitQueue, lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)	
--) 
-- []
--(
-- 	\lcircguard IsEmpty(waitQueue) = False \rcircguard \circguard 
-- 	\circvar notified : ThreadID \circspot 
-- 	\circvar waitType : WaitType \circspot 
--	 RemoveMostEligigbleFromWaitQueue   ; 
--
--
--	removed_thread.object!notified!waitType -> 
 --	ObjectState(waitQueue, lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)
 --) 
 --[]
 (
 	get_queueForLock.object!queueForLock ->
 	ObjectState(object, waitQueue, lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)
 )
 []
 (
 	set_lockedBy.object?newLockedBy ->
	ObjectState(object,waitQueue, newLockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)
 )
 []
 (
 	increment_locks.object ->
 	ObjectState(object,waitQueue, lockedBy, locks +1, previousLocks, queueForLock, waitForObjectThreads)
 )
 []
 (
 	decrement_locks.object ->
 	ObjectState(object,waitQueue, lockedBy, locks -1, previousLocks, queueForLock, waitForObjectThreads)
 )
 []
 (
 	get_locks.object!locks ->
 	ObjectState(object,waitQueue, lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)
 )
 []
 (
 	get_waitQueue.object!waitQueue -> 
 	ObjectState(object,waitQueue, lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)
 ) 
 []
 (
 	get_waitForObjectThreads.object!waitForObjectThreads -> 
 	ObjectState(object,waitQueue, lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)
 ) 
 []
 (
 	fully_unlock.object ->
 	ObjectState(object,waitQueue, nullThreadId, 0, mapUpdate(previousLocks, lockedBy, locks )  , queueForLock, waitForObjectThreads)
 ) 
 []
 (
 	--someThread? != nullSchedulableId 
	--someThread? \notin ElementsOf (queueForLock ) 
 	add_to_queue_for_lock.object?someThread?priorityLevel ->
 	ObjectState(object,waitQueue, lockedBy, locks, previousLocks, AddToPriorityQueue(queueForLock, someThread, priorityLevel) , waitForObjectThreads)
 )
 []
 (
 	--lockedBy' \in \dom previousLocks \implies locks' = previousLocks(lockedBy') 
	--lockedBy' \notin \dom previousLocks \implies locks' = 1 

 	assign_eligible.object ->	
 	--let (queueForLock', lockedBy')= RemoveFromPriorityQueue(queueForLock) 
 	--within 

 	ObjectState(object,waitQueue, head(mapLookup(queueForLock, HighestPopulatedPriority(queueForLock))), locks, previousLocks, RemoveFromPriorityQueue(queueForLock) ,  waitForObjectThreads)
 )
 []
 (
 	--someThread? != nullSchedulableId 
	--someThread? \notin ElementsOf(waitQueue) 

 	add_to_wait_queue.object?someThread?priorityLevel?waitType ->
 	if waitType == waitForObject then
 		ObjectState(object, AddToPriorityQueue(waitQueue, someThread, priorityLevel), lockedBy, locks, previousLocks, queueForLock,  union(waitForObjectThreads, {someThread}))
 	else
 		ObjectState(object, AddToPriorityQueue(waitQueue, someThread, priorityLevel), lockedBy, locks, previousLocks, queueForLock, waitForObjectThreads)

 )
 []
 (
 	--waitingThread? \in \ran(waitQueue(priorityLevel?)) 
 	remove_thread_from_wait_queue.object?waitingThread?priorityLevel ->
 	ObjectState(object, RemoveThreadFromPriorityQueue(waitQueue, waitingThread, priorityLevel) , lockedBy, locks, previousLocks, queueForLock, diff(waitForObjectThreads, {waitingThread})  )
 )
 []
 (
 	--notified! \in waitForObjectThreads \implies waitType! = waitForObject 
	--notified! \notin waitForObjectThreads \implies waitType! = wait 
 	remove_most_eligible_from_wait_queue.object ->
 	--let (waitQueue', notified) =  RemoveFromPriorityQueue(waitQueue)  
 	--within 																					 														
 	ObjectState(object, RemoveFromPriorityQueue(waitQueue) , lockedBy, locks, previousLocks, queueForLock, diff(waitForObjectThreads, {head(mapLookup(waitQueue, HighestPopulatedPriority(waitQueue)))}	))
 )


nametype MonitorSync = {|fully_unlock, relock, relock_this|}
nametype MLCSync = {| relock_this, lock_request, lockAcquired, get_lockedBy, reset_lockedBy, fully_unlock |}
nametype CPCSync = {|setCeilingPriority, get_ceilingPriority  |}


Execute_Object(object, interruptedThreads, ceilingPriority,queueForLock, previousLocks, locks, lockedBy) = 
(
	(
		( 
			Monitor(object)
			[|  MonitorSync |]
			Synchronisation(object)
		)\ MonitorSync
	[|   MLCSync |]
		MonitorLockController(object,queueForLock, previousLocks, locks, lockedBy, interruptedThreads)
) \MLCSync
 [|   CPCSync |]
 CeilingPriorityController(object, ceilingPriority) 
)  \CPCSync


assert Monitor(WriterObjectId); Loop :[ deadlock free [FD] ]



assert MonitorLockController(WriterObjectId,EmptyPriorityQueue, EmptyThreadMap, 0, nullThreadId, {} ); Loop :[ deadlock free [FD] ]
assert CeilingPriorityController(WriterObjectId, 0); Loop :[ deadlock free [FD] ]

Monitor(object) = 
	MonitorUnlocked(object)



MonitorUnlocked(object) = 
 (
	startSynchMeth.object?someThread -> 	
	lock_request.object!someThread ->
	MonitorUnlocked	(object)	
) 
 [] 
 (
	lockAcquired.object?lockingThread -> 
	get_ceilingPriority.object?ceilingPriority -> 
	(
	--	(
			get_priorityLevel.lockingThread.object?priority-> -- :(priority <= ceilingPriority) -> 
			if (priority <= ceilingPriority) then
			(
			raise_thread_priority.lockingThread!ceilingPriority ->  
			MonitorLocked(object, lockingThread) 
			)
	--	)
	--	[]
			else 
			(
			--	get_priorityLevel.lockingThread.object?priority:(priority > ceilingPriority) -> 
				throw.ceilingViolationException -> 
				CHAOS(Events)
			)
		
	)	
) 



MonitorLocked(object, lockedBy)=

	(
		startSynchMeth.object.lockedBy -> 	
		increment_locks.object -> 
		MonitorLocked(object, lockedBy)

	)	
	[] 
	(
		startSynchMeth.object?someThread:(diff(ThreadID,{lockedBy})) -> 	
		lock_request.object!someThread ->
		MonitorLocked(object, lockedBy)

	)	
	[] 
	(
		endSyncMeth.object.lockedBy -> 
		(
			(
				decrement_locks.object -> 
				lower_thread_priority.lockedBy -> 	
				MonitorUnlocked(object)
			) 
			[] 
			(
				decrement_locks.object -> 
				MonitorLocked(object, lockedBy)

			) 
		
		) 		
	)	
	[] 
	(
		unlock_Monitor.object?unlockingThread -> 
		fully_unlock.object ->  
		lower_thread_priority.unlockingThread -> 
		MonitorUnlocked(object)
	) 

nametype WaitSync = {|cancel_wait_timer, waitRet, waitForObjectRet  |}

nametype InterruptSync = {| remove_from_wait, get_waitQueue |}

Synchronisation(object) = 
(
	(
		WaitActions(object)
		[| WaitSync |]
		NotifyActions(object)
	) \WaitSync
	[| InterruptSync |]
	Interrupt_Object(object)
)\InterruptSync


--assert WaitActions(WriterObjectId); Loop :[ deadlock free [FD] ]

assert Wait(WriterObjectId); Loop :[ deadlock free [FD] ]
assert TimedWait(WriterObjectId); Loop :[ deadlock free [FD] ]
assert WaitForObject(WriterObjectId); Loop :[ deadlock free [FD] ]


--assert NotifyActions(WriterObjectId); Loop :[ deadlock free [FD] ]
assert Notify(WriterObjectId); Loop :[ deadlock free [FD] ]
assert NotifyAll(WriterObjectId); Loop :[ deadlock free [FD] ]

assert Interrupt_Object(WriterObjectId); Loop :[ deadlock free [FD] ]




WaitActions(object) = 
	Wait(object) ||| TimedWait(object) ||| WaitForObject(object)



NotifyActions(object) = 
	Notify(object) ||| NotifyAll(object)



Wait(object) = 

waitCall.object?someThread ->  
 ( 
	(
	--	isInterruptedCall.someThread -> 
	--	isInterruptedRet.someThread.False ->
		isInterrupted.someThread.False ->
		(
		(
			get_lockedBy.object.someThread -> 
			get_priorityLevel.someThread.object?priorityLevel -> 
			add_to_wait.object!someThread!priorityLevel!wait -> 
			unlock_Monitor.object!someThread ->  
			Wait(object)
		) 	
		[]  
		(
			get_lockedBy.object?lockedBy:( diff(ThreadID, {someThread}) ) -> 
			throw.illegalMonitorStateException -> 
			CHAOS(Events)
		) 
	) 
	) 
	[] 
       (
       		--isInterruptedCall.someThread -> 
       		--isInterruptedRet.someThread.True -> 
       		isInterrupted.someThread.True -> 
       		throw.interruptedException -> 
       		CHAOS(Events)
       )
)
			

TimedWait(object) = 
	TimedWaitHandler(object)
	[| {| start_timer |} |]
	(||| t : ThreadID @ TimedWaitTimer(object, t))


TimedWaitHandler(object)  = 

    timedWaitCall.object?someThread?waitTime -> 	
    (
	(
	get_lockedBy.object.someThread -> 
		if ( (timeMillis(waitTime) < 0) or (timeNanos(waitTime) < 0 and timeNanos(waitTime) > maxNanos) ) then 
		(
			throw.illegalArgumentException ->  
			CHAOS(Events)
		) 
		else 
		(
			get_priorityLevel.someThread.object?priorityLevel -> 
			add_to_wait.object!someThread!priorityLevel!wait -> 
			start_timer.object!someThread!priorityLevel!waitTime -> 
			unlock_Monitor.object!someThread -> 
			TimedWaitHandler(object) 
		) 
		
	)			
 [] 
	(	
		get_lockedBy.object?lockedBy:(diff(ThreadID, {someThread}) ) -> 
		throw.illegalMonitorStateException -> 
		CHAOS(Events)
	)
    )	



TimedWaitTimer(object, waitingThread) = 
(
	start_timer.object.waitingThread?priorityLevel?waitTime -> 
	(
	(
		(
			circwait.valueOf(waitTime) ->
			remove_from_wait.object!waitingThread!priorityLevel ->  			
			waitRet.object!waitingThread ->
			SKIP 
		) 
		[]  
		(
			cancel_wait_timer.object.waitingThread -> 
			SKIP
		)
         	
	)
	; 
	relock_this.object!waitingThread -> 
	TimedWaitTimer(object, waitingThread)
	)
	) 
	[] 
	(
		cancel_wait_timer.object.waitingThread -> 
		TimedWaitTimer(object, waitingThread)
	)
 [] 
 (
	(waitRet.object.waitingThread -> TimedWaitTimer(object, waitingThread))
	[] 
	(waitForObjectRet.object.waitingThread?w -> TimedWaitTimer(object, waitingThread))     
)

	


WaitForObject(object) = 
	WaitForObjectHandler(object)
	[| {| start_waitForObject_timer |} |]
	(||| t : ThreadID @ WaitForObjectTimer(object, t))



WaitForObjectHandler(object) = 
    waitForObjectCall.object?someThread?waitTime -> 	
    (
	(
	get_lockedBy.object.someThread -> 
		if ( (timeMillis(waitTime) < 0) or (timeNanos(waitTime) < 0) ) then 
		(
			throw.illegalArgumentException ->  
			CHAOS(Events)
		 ) 
		else 
		(
			get_priorityLevel.someThread.object?priorityLevel -> 
			add_to_wait.object?someThread?priorityLevel!waitForObject -> 
			start_waitForObject_timer.object!someThread!priorityLevel!waitTime -> 
			unlock_Monitor.object!someThread -> 
			WaitForObjectHandler(object)
		 ) 
		
	 )			
 [] 
	(	
		get_lockedBy.object?lockedBy:(diff(ThreadID, {someThread}) ) -> 
		throw.illegalMonitorStateException -> 
		CHAOS(Events)
	 )
     )	



WaitForObjectTimer(object, waitingThread) = 
(
	start_waitForObject_timer.object?waitingThread?priorityLevel?waitTime -> 
	(
	(
		(
			circwait.valueOf(waitTime) -> 
			remove_from_wait.object!waitingThread!priorityLevel ->  			
			waitForObjectRet.object!waitingThread!False ->
			SKIP 
		 ) 
		[]  
		(
			cancel_wait_timer.object.waitingThread -> 
			SKIP
		 )
         	
	 ) ; 
	relock_this.object!waitingThread -> 
	WaitForObjectTimer(object, waitingThread)
	 )
	 ) 
	[] 
	(
		cancel_wait_timer.object.waitingThread -> 
		WaitForObjectTimer(object, waitingThread)
	 ) 
 [] 
 (
	(waitRet.object?n -> WaitForObjectTimer(object, waitingThread))
	[] 
	(waitForObjectRet.object?n?w -> WaitForObjectTimer(object, waitingThread))
     
)

	


Notify(object) = 
(
 notify.object?someThread -> 
 (
	(
		get_lockedBy.object.someThread -> 
		get_waitQueue.object?waitQueue ->
		(
			if  IsEmpty(waitQueue) == False  then 
			(
				ResumeThread(object);
			 	Notify(object)
			) 
			else 
				Notify(object)
			
		)
	)
 [] 
	(
		get_lockedBy.object?lockedBy:(diff(ThreadID, {someThread})) -> 
		throw.illegalMonitorStateException -> 
		CHAOS(Events)
	) 
) 
) 
 [] 
 (
	(waitRet.object?n -> Notify(object))
	[] 
	(waitForObjectRet.object?n?w -> Notify(object))
 )



ResumeThread(object) = 
 		(
					removed_thread.object?notified.wait -> 
					cancel_wait_timer.object!notified -> 
					relock_this.object!notified -> 
					waitRet.object!notified -> 
					SKIP
				)
				[]
				(
					removed_thread.object?notified.waitForObject -> 
					cancel_wait_timer.object!notified -> 
					relock_this.object!notified -> 
					waitForObjectRet.object!notified!True -> 
					SKIP
				)		



NotifyAll(object) = 
 (
 	notifyAll.object?someThread -> 
 	(
		(			
			get_lockedBy.object.someThread -> 
			NotifyAllHandler(object, someThread) ;
			NotifyAll(object)
		)  	
		[] 
		(
			get_lockedBy.object?lockedBy:(diff(ThreadID, {someThread})) -> 
			throw.illegalMonitorStateException -> 
			CHAOS(Events)
		) 
	)
  )
 [] 
 (
	(waitRet.object?n -> NotifyAll(object))
	[] 
	(waitForObjectRet.object?n?w -> NotifyAll(object))
 )


NotifyAllHandler(object, notified) =
get_waitQueue.object?waitQueue ->	
	if  IsEmpty(waitQueue) == False then 
	(
		ResumeThread(object) ;		
		NotifyAllHandler(object, notified)
	 )  
	else  
		SKIP  




Interrupt_Object(object) = 

interrupt?waitingThread -> 
get_waitQueue.object?retreivedWait -> 

(
if ( member(waitingThread, ElementsOf( retreivedWait ) ) ) then
(
	--get_waitQueue.object?retreivedWait:( member(waitingThread, ElementsOf( retreivedWait ) ) ) -> 
 	cancel_wait_timer.object!waitingThread -> 
 	get_priorityLevel.waitingThread.object?priorityLevel -> 
 	remove_from_wait.object!waitingThread!priorityLevel -> 
	relock_this.object!waitingThread -> 
	get_waitForObjectThreads.object?wfot -> 	
	(
		if ( not member(waitingThread, wfot) ) then
		(
		--	get_waitForObjectThreads.object?wfot:( not member(waitingThread, wfot) ) -> 					
			waitRet.object!waitingThread -> 
			SKIP
		)
		--[]
		else
		(
		--	get_waitForObjectThreads.object?wfot:( member(waitingThread, wfot) ) -> 
			waitForObjectRet.object!waitingThread!True -> 
			SKIP
		)		 	
 	)	; 	
 	
	Interrupt_Object(object)
 ) 
-- [] 
else
 (
 --	get_waitQueue.object?retreivedWait:( not member(waitingThread, ElementsOf( retreivedWait ) ) ) -> 
	Interrupt_Object(object )
   )
) 




MonitorLockController(object,queueForLock, previousLocks, locks, lockedBy, interruptedThreads) = 
(	
 (
	lock_request.object?someThread ->
	get_priorityLevel.someThread.object?priorityLevel -> 
	--add_to_queue_for_lock.object.someThread!priorityLevel  -> 
	
	MonitorLockController(object,AddToPriorityQueue(queueForLock, someThread, priorityLevel), previousLocks, locks, lockedBy, interruptedThreads)
)    
 []
 (
	relock_this.object?someThread -> 
	get_priorityLevel.someThread.object?priorityLevel -> 
	(
		add_to_queue_for_lock.object.someThread!priorityLevel  ->
		(
			(	
				--isInterruptedCall.someThread -> 
				--isInterruptedRet.someThread.False ->
				isInterrupted.someThread.False ->
				--MonitorLockController(object,interruptedThreads) 
				MonitorLockController(object,AddToPriorityQueue(queueForLock, someThread, priorityLevel), previousLocks, locks, lockedBy, interruptedThreads)
			)
			[] 
			(
			--	isInterruptedCall.someThread -> 
			--	isInterruptedRet.someThread.True ->
			isInterrupted.someThread.True ->
				--interruptedThreads := interruptedThreads \cup {someThread} ; 
			--	MonitorLockController(object,union(interruptedThreads, {someThread}) ) 

				MonitorLockController(object,AddToPriorityQueue(queueForLock, someThread, priorityLevel), previousLocks, locks, lockedBy, union(interruptedThreads, {someThread}))
			)
		)
	)
)
 []
 (		
		(IsEmpty(queueForLock) == False and lockedBy == nullThreadId) &
		(	
		--	assign_eligible.object   -> 
			lockAcquired.object.lockedBy -> 
			if member(lockedBy,interruptedThreads) then 
			(				
				throw.interruptedException -> 
				CHAOS(Events)
			) 
			else 
				--MonitorLockController(object,interruptedThreads)	

			--	ObjectState(object,waitQueue, head(mapLookup(queueForLock, HighestPopulatedPriority(queueForLock))), locks, previousLocks, RemoveFromPriorityQueue(queueForLock) ,  waitForObjectThreads)

				MonitorLockController(object,RemoveFromPriorityQueue(queueForLock), previousLocks, locks, head(mapLookup(queueForLock, HighestPopulatedPriority(queueForLock))), interruptedThreads)							
			
		)	
	)
-- []
-- (	
--	get_lockedBy.object!lockedBy -> 
--	MonitorLockController(object,interruptedThreads)
 --)	
 []
 (	
	increment_locks.object -> 
	if locks < 3 then
		MonitorLockController(object,queueForLock, previousLocks, locks+1, lockedBy, interruptedThreads) 
	else
		MonitorLockController(object,queueForLock, previousLocks, locks, lockedBy, interruptedThreads) 	
	--MonitorLockController(object,interruptedThreads) 
	
)
 []
 (		
	decrement_locks.object  -> 
	(
	--	get_locks.object?locks ->
		(
			if locks == 1 then 
			(
			--	set_lockedBy.object!nullThreadId ->
			--	MonitorLockController(object,interruptedThreads) 
				MonitorLockController(object,queueForLock, previousLocks, 0, nullThreadId, interruptedThreads) 	
			)
			else 
			--	 MonitorLockController(object,interruptedThreads)  			
				MonitorLockController(object,queueForLock, previousLocks, locks-1, lockedBy, interruptedThreads) 	
		)
	) 
)
 []
 (		
	fully_unlock.object -> 
	--fully_unlock ->  
	--MonitorLockController(object,interruptedThreads) 
	-- 	ObjectState(object,waitQueue, nullThreadId, 0, mapUpdate(previousLocks, lockedBy, locks )  , queueForLock, waitForObjectThreads)

	MonitorLockController(object,queueForLock, mapUpdate(previousLocks, lockedBy, locks ), 0, nullThreadId, interruptedThreads)
)
)


CeilingPriorityController(object,ceilingPriority) = 
(
 	setCeilingPriority?mission!object?priority -> 
 	GetCeilingPriority(object,priority)
) 
 [] 
( 
	get_ceilingPriority.object!ceilingPriority -> 
	CeilingPriorityController(object,ceilingPriority)
)


GetCeilingPriority(object, ceilingPriority) =
	get_ceilingPriority.object!ceilingPriority -> 
	GetCeilingPriority(object, ceilingPriority)