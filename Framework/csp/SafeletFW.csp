--SAFELET
--Models javax.safetycritical.Safelet

--SAFELET CHANNELS

channel done_safeletFW

channel initializeApplicationCall 
channel initializeApplicationRet 
channel checkSchedulable : MissionID.Bool 
channel getSequencerCall 
channel getSequencerRet : SchedulableID
channel end_safelet_app

nametype SafeletFWChanSet = 
  {|initializeApplicationCall,initializeApplicationRet,
    getSequencerCall,getSequencerRet,
    start_toplevel_sequencer, end_safelet_app,done_safeletFW,
    checkSchedulable, deregister|}


SafeletFW =
  SafeletFWBehaviour 

SafeletFWBehaviour=

  InitializeApplication ;
  Execute_S ;    
  SKIP

InitializeApplication =
  initializeApplicationCall ->
  initializeApplicationRet ->
  SKIP
   
--Contains GetSequencerMeth events   
Execute_S =
  getSequencerCall ->
  getSequencerRet?topLevelSequencer ->
  if topLevelSequencer != nullSequencerId then
  (
      start_toplevel_sequencer.topLevelSequencer -> 
      Methods_S({}, topLevelSequencer) ;
      end_safelet_app ->
      SKIP
  ) 
  else
    end_safelet_app ->
    done_safeletFW -> SKIP
  
  Methods_S(globallyRegistered, sequencerID) = 
  (
    Register_S(globallyRegistered, sequencerID)
    [] 
    Deregister_S(globallyRegistered, sequencerID)
    []
    done_toplevel_sequencer -> SKIP 
  )   
  
   
  Register_S(globallyRegistered, sequencerID) = 
  (
      register?schedulable:diff(SchedulableID, globallyRegistered)?mission ->
      checkSchedulable.mission!True -> 
      Methods_S(union(globallyRegistered,{schedulable}), sequencerID) 
  )
  []
  (
    register?schedulable:globallyRegistered?mission ->  
    checkSchedulable.mission!False -> 
    Methods_S(globallyRegistered, sequencerID)
  )
    
  Deregister_S(globallyRegistered, sequencerID) = 
    deregister?schedulables -> 
    Methods_S(diff(globallyRegistered,schedulables), sequencerID) 

assert sbdia( SafeletFW ); Loop :[ deadlock free [FD] ]
assert sbdia( SafeletFW ) :[ divergence free ]
assert sbdia( SafeletFW ) :[ deterministic  [FD] ]
