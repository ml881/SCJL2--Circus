--Thread
--Models java.lang.Thread

include "Thread.csp"


--Thread Channels
channel get_priorityLevel : ThreadID . ObjectID . PriorityLevel 

channel raise_thread_priority : ThreadID . PriorityLevel 
channel lower_thread_priority : ThreadID  

channel set_interrupted : ThreadID . Bool 
channel get_interrupted : ThreadID . Bool 

channel interrupt : ThreadID 

channel isInterrupted : ThreadID . Bool 
channel isInterruptedCall : ThreadID 
channel isInterruptedRet : ThreadID . Bool 

channel interrupted : ThreadID . Bool 
channel interruptedCall : ThreadID 
channel interruptedRet : ThreadID . Bool 

channel get_priorityStack : ThreadID.Seq(PriorityLevel)
channel end_threadState : ThreadID



ThreadFW(thread, basePriority) =
( 
	Execute(thread, basePriority, <basePriority>,basePriority, False)
)
/\(done_toplevel_sequencer -> SKIP)

Execute(thread, basePriority, priorityStack, activePriority, interruptedVar) = 
(  
	Priority (thread, basePriority, priorityStack, activePriority)
	|||
	Interrupts(thread, interruptedVar) 	
)																																																																																																																																																																																																																																																																																																																																																																																																																													

Priority(thread, basePriority, priorityStack, activePriority) = 
(
	-- comparing these donks up FDR
	if priorityStack ==  <basePriority> then 
 	(
		IncreasePriority(thread, basePriority, priorityStack, activePriority)
		[]	
		GetPriorityLevel(thread, basePriority, priorityStack, activePriority)
	)
	else 
	(
		IncreasePriority(thread, basePriority, priorityStack, activePriority) 
		[]
		DecreasePriority(thread, basePriority, priorityStack, activePriority)
		[]
		GetPriorityLevel(thread, basePriority, priorityStack, activePriority)
	)
) 
 	
 

IncreasePriority(thread, basePriority, priorityStack, activePriority) = 
	raise_thread_priority.thread?ceilingPriority ->
	Priority(thread, basePriority, <ceilingPriority>^priorityStack, ceilingPriority)


DecreasePriority(thread, basePriority, priorityStack, activePriority) = 
	lower_thread_priority.thread -> 
	if (priorityStack) == <basePriority> then
		Priority(thread, basePriority, priorityStack, basePriority)
	else
	Priority(thread, basePriority,(tail(priorityStack)), basePriority)
	

GetPriorityLevel(thread, basePriority, priorityStack, activePriority) =
 	get_priorityLevel.thread?object!activePriority -> 
 	Priority(thread, basePriority, priorityStack, activePriority)



assert Priority(WriterThreadID, 0, <0>, 0); Loop :[ deadlock free [FD] ]
assert Priority(WriterThreadID, 0, <0>, 0):[ divergence free ]
assert Priority(WriterThreadID, 0, <0>, 0) :[ deterministic  [FD] ]  



Interrupts(thread, interruptedV) = 
(
	Interrupt(thread, interruptedV) 
	[]
	IsInterrupted(thread, interruptedV)		 
	[]
	Interrupted(thread, interruptedV)
)


Interrupt(thread, interruptedV) = 
	interrupt.thread -> 
	Interrupts(thread, True)


IsInterrupted(thread, interruptedV) = 
	isInterrupted.thread!interruptedV -> 
	Interrupts(thread, interruptedV)


Interrupted(thread, interruptedV) = 
	interrupted.thread!interruptedV ->
	Interrupts(thread, False)


assert Interrupts(WriterThreadID, False); Loop :[ deadlock free [FD] ]
assert Interrupts(WriterThreadID, False) :[ divergence free ]
assert Interrupts(WriterThreadID, False) :[ deterministic  [FD] ]  



assert ThreadFW(WriterThreadID, 0); Loop :[ deadlock free [FD] ]
assert ThreadFW(WriterThreadID, 0) :[ divergence free ]
assert ThreadFW(WriterThreadID, 0) :[ deterministic  [FD] ]  