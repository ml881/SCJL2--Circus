\begin{zsection}
  \SECTION ~ OneShotEventHandlerFW ~ \parents ~ MissionChan, SchedulableChan, SchedulableId,\\
   \quad MissionId, MissionIds,TopLevelMissionSequencerChan, OneShotEventHandlerChan,\\
   \quad SafeletMethChan, FrameworkChan, AperiodicParameters
\end{zsection}
%
\begin{circus}
  \circprocess OneShotEventHandlerFW ~ \circdef ~\\
  \quad  schedulable : SchedulableID; startTime: JTime ; aperiodicParameters : AperiodicParameters \circspot\\
  \quad ~\circbegin
\end{circus}
%
\begin{schema}{\circstateignore State}
  controllingMission : MissionID\\
  applicationTerminating : \boolean \\
  deadline : JTime \\
  deadlineMissHandler : SchedulableID \\
\end{schema}
%
\begin{parser}
\begin{circusaction}
\circstate State
\end{circusaction}
\end{parser}
%
\begin{schema}{Init}
 State~'\\
 \where
  controllingMission' = nullMissionId\\
  applicationTerminating' = \false \\
  deadline' = deadlineOfAperiodic(aperiodicParameters) \\
  deadlineMissHandler' = missHandlerOfAperiodic(aperiodicParameters) \\
\end{schema}
%
\begin{circusaction}
Start \circdef\\
\quad  \circblockopen
  	Register \circseq \\
  	Activate
     \circblockclose   \\
\quad  \extchoice\\
\quad  \circblockopen
  	activate\_schedulables?someMissionID \then \\
  	Start
  \circblockclose  \\
\quad  \extchoice \\
\quad \circblockopen
	done\_toplevel\_sequencer \then \\
	applicationTerminating := \true  \\
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
Register \circdef \\
\quad    register~.~schedulable~?~mID \then \\
\quad    controllingMission := mID
\end{circusaction}
%
\begin{circusaction}
Activate ~ \circdef ~ \\
\quad    activate\_schedulables~.~controllingMission \then \\
\quad    \Skip
\end{circusaction}
%
\begin{circusaction}
Execute \circdef  \\
\quad \circblockopen
		\circblockopen
			\circblockopen
				Run \\
					\quad   \lpar \emptyset | MethodsSync | \emptyset \rpar\\
				Methods\\
			\circblockclose \\
			\lpar \emptyset | \lchanset end\_releases \rchanset | \emptyset \rpar\\
		SignalTermination
	  \circblockclose  \\
	  	\quad   \lpar \emptyset| STCSync | \{startTime\} \rpar\\
		StartTimeController
	\circblockclose
\end{circusaction}
%
\begin{circusaction}
Run \circdef \\
\quad	\circif deadlineMissHandler = nullSchedulableId \circthen \\
\quad 	\circblockopen
					ScheduleOrWait \\
						\lpar \emptyset | ReleaseSync | \emptyset \rpar \\
					Release
	\circblockclose  \\
\quad \circelse deadlineMissHandler \neq nullSchedulableId \circthen \\
\quad \circblockopen
		\circblockopen
			ScheduleOrWait \\
				\lpar \emptyset | ReleaseSync | \emptyset \rpar \\
			Release
		\circblockclose
			\lpar \emptyset | DeadlineSync | \emptyset \rpar \\
			DeadlineClock
	\circblockclose \\
\quad \circfi
\end{circusaction}
%
\begin{circusaction}
ScheduleOrWait \circdef\\
\quad get\_startTime~.~schedulable~?~startTime \then \\
\quad \circif startTime != NULL \circthen \\
\qquad        Scheduled \\
\quad  \circelse startTime = NULL \circthen\\
\qquad      NotScheduled \\
\quad \circfi
\end{circusaction}
%
\begin{circusaction}
Release \circdef \\
\quad \circblockopen
    		handleAsyncEventCall~.~schedulable \then \\
    		handleAsyncEventRet~.~schedulable \then  \\
	    	release\_complete~.~schedulable \then \\
    		Release
\quad  \circblockclose  \\
\quad \extchoice\\
\quad \circblockopen
		reschedule\_handler~.~schedulable~?~newStartTime \then \\
		set\_startTime~.~schedulable~!~newStartTime \then \\
		Release
    \circblockclose \\
\quad \extchoice\\
\quad \circblockopen
		end\_releases~.~schedulable \then \\
    stop\_release~.~schedulable \then \\
		\Skip
     \circblockclose
\end{circusaction}
%
\begin{circusaction}
DeadlineClock \circdef \\
\quad release~.~schedulable \then \\
\quad	\circblockopen
		\circblockopen
			\circblockopen
				\circwait valueOf(deadline) \circseq \\
				release~.~deadlineMissHandler \then \\
				DeadlineClock
			\circblockclose  \\
			\extchoice \\
			\circblockopen
	 			release\_complete~.~schedulable \then \\
				DeadlineClock
			\circblockclose
			\extchoice \\
			\circblockopen
	 			deschedule\_handler~.~schedulable \then \\
				DeadlineClock
			\circblockclose
		\circblockclose
	\circblockclose \\
    \circinterrupt
    \circblockopen
    		end\_releases~.~schedulable \then \\
	    	\Skip
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
Scheduled \circdef \\
\quad get\_startTime~.~schedulable~?~startTime \then \\
\quad \circblockopen
  \circblockopen
		\circwait valueOf(startTime) \\
    release~.~schedulable \then \\
		handleAsyncEventCall~.~schedulable \then \\
	 	NotScheduled
     \circblockclose \\
  \circinterrupt \\
  \circblockopen
     	\circblockopen
      		deschedule\_handler~.~schedulable \then \\
      		NotScheduled\\
      	\circblockclose \\
     	\extchoice \\
     	\circblockopen
     		reschedule\_handler~.~schedulable~?~newStartTime \then \\
     		set\_startTime~.~schedulable~!~newStartTime \then \\
     		Scheduled\\
     	\circblockclose  \\
   \circblockclose    \\
 \circblockclose
\end{circusaction}
%
\begin{circusaction}
NotScheduled \circdef\\
\quad    \circblockopen
        	deschedule\_handler~.~schedulable \then \\
        	NotScheduled\\
       \circblockclose \\
\quad    \extchoice\\
\quad    \circblockopen
       		reschedule\_handler~.~schedulable~?~newStartTime \then \\
       		set\_startTime~.~schedulable~!~newStartTime \then \\
       		Scheduled \\
        \circblockclose      \\
\quad    \extchoice\\
\quad    \circblockopen
		end\_releases~.~schedulable \then \\
		\Skip
	\circblockclose \\
\end{circusaction}
%
\begin{circusaction}
Methods \circdef \\
\quad \circblockopen
	Deschedule \circseq \\
	Methods
    \circblockclose  \\
\quad \extchoice \\
\quad \circblockopen
	GetNextReleaseTime \circseq \\
	Methods
    \circblockclose  \\
\quad \extchoice \\
\quad \circblockopen
	ScheduleNextRelease\circseq \\
	Methods
    \circblockclose  \\
\quad \extchoice\\
\quad \circblockopen
	end\_releases~.~schedulable \then \\
	\Skip
     \circblockclose
\end{circusaction}
%
\begin{circusaction}
Deschedule \circdef  \circvar wasScheduled : \boolean \circspot\\
\quad  descheduleCall~.~schedulable \then\\
\quad  deschedule\_handler.schedulable \then\\
\quad  get\_startTime~.~schedulable~?~startTime \then \\
\quad \circblockopen
 \circif startTime = NULL \circthen\\
\quad 	wasScheduled := \false \\
 \circelse startTime \neq NULL \circthen\\
\quad	wasScheduled := \true \\
 \circfi \circseq\\
  set\_startTime~.~schedulable~!~NULL \then \\
  descheduleRet~.~schedulable~!~wasScheduled \then \\
  \Skip
 \circblockclose
\end{circusaction}
%
\begin{circusaction}
GetNextReleaseTime \circdef \\
\quad getNextReleaseTimeCall~.~schedulable \then \\
\quad get\_startTime~.~schedulable~?~startTime \then \\
\quad getNextReleaseTimeRet~.~schedulable~!~startTime \then \\
\quad \Skip
\end{circusaction}
%
%Since jInt is defiend to only allow natural numbers, a negative cannot be supplied here
\begin{circusaction}
ScheduleNextRelease \circdef \\
\quad scheduleNextRelease~.~schedulable~?~newStartTime \then \\
\quad set\_startTime~.~schedulable~!~newStartTime \then \\
\quad \circif newStartTime = NULL \circthen \\
\qquad 	\circblockopen
		deschedule\_handler.schedulable \then \\
		\Skip\\
	\circblockclose \\
\quad \circelse newStartTime \neq NULL \circthen \\
\qquad	\circblockopen
 		reschedule\_handler~!~schedulable~!~newStartTime \then \\
 		\Skip \\
 	\circblockclose \\
\quad \circfi
\end{circusaction}
%
\begin{circusaction}
SignalTermination \circdef\\
\quad signalTerminationCall~.~schedulable \then\\
\quad end\_releases~.~schedulable \then\\
\quad signalTerminationRet~.~schedulable \then\\
\quad done\_schedulable~.~schedulable \then\\
\quad \Skip
\end{circusaction}
%
\begin{circusaction}
StartTimeController \circdef \\
\quad \circblockopen
	get\_startTime~.~schedulable~!~startTime \then \\
	StartTimeController
    \circblockclose \\
\quad \extchoice \\
\quad \circblockopen
	set\_startTime~.~schedulable~?~newStartTime \then \\
	StartTimeController
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
Cleanup \circdef \\
\quad	cleanupSchedulableCall~.~schedulable \then\\
\quad	cleanupSchedulableRet~.~schedulable \then \\
\quad \Skip
\end{circusaction}
%
\begin{circusaction}
\circspot \circblockopen  \circmu X \circspot \circblockopen   \lschexpract Init \rschexpract \circseq Start \circseq\\
\circblockopen  \circif applicationTerminating = \false \circthen \\
		\quad \circblockopen Execute \circseq Cleanup \circseq X\circblockclose \\
	\circelse applicationTerminating = \true \circthen \\
		\quad \circblockopen
			end\_oneShot\_app~.~schedulable \then \\
			\Skip
		\circblockclose \\
\circfi \circblockclose  \circblockclose  \circblockclose
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
