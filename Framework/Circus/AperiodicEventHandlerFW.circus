\begin{zsection}
  \SECTION ~ AperiodicEventHandlerFW ~ \parents ~ MissionChan, SchedulableChan, SchedulableId, \\
  \quad MissionId, MissionIds, TopLevelMissionSequencerChan, SafeletMethChan, FrameworkChan,\\
  \quad  AperiodicEventHandlerChan, AperiodicParameters
  \end{zsection}
%
\begin{circus}
  \circprocess AperiodicEventHandlerFW ~ \circdef ~ \\
  \quad  schedulable : SchedulableID; aperiodicType : AperiodicType ; \\
  \quad aperiodicParameters : AperiodicParameters \circspot \\
  \quad~\circbegin
\end{circus}
%
\begin{schema}{\circstateignore State}
  controllingMission : MissionID\\
  applicationTerminating : \boolean \\
  pending : \boolean \\
  data : \num \\
  deadline : JTime \\
  deadlineMissHandler : SchedulableID \\
\end{schema}
%
\begin{parser}
\begin{circusaction}
\circstate State
\end{circusaction}
\end{parser}
%
\begin{schema}{Init}
  State~'\\
\where
  controllingMission' = nullMissionId\\
  applicationTerminating' = \false \\
  pending' = \false \\
  deadline' = deadlineOfAperiodic(aperiodicParameters) \\
  deadlineMissHandler' = missHandlerOfAperiodic(aperiodicParameters) \\
\end{schema}
%
\begin{circusaction}
Start \circdef\\
 \circblockopen
   	Register \circseq \\
   	Activate
  \circblockclose  \\
\quad  \extchoice\\
  \circblockopen
  	activate\_schedulables?someMissionID \then \\
  	Start
  \circblockclose \\
\quad  \extchoice \\
  \circblockopen
	done\_toplevel\_sequencer \then \\
	applicationTerminating := \true \\
     \circblockclose
\end{circusaction}
%
\begin{circusaction}
Register \circdef \\
\quad    register~.~schedulable~?~missionID \then \\
\quad    controllingMission := missionID
\end{circusaction}
%
\begin{circusaction}
Activate ~ \circdef ~ \\
\quad    activate\_schedulables~.~controllingMission \then \\
\quad    \Skip
\end{circusaction}
%
\begin{circusaction}
Execute \circdef  \\
 \circif deadlineMissHandler != nullSchedulableId \circthen \\
\quad \circblockopen
\circblockopen
\circblockopen
  \circif aperiodicType = aperiodic \circthen \\
  \quad  Ready\\
  \circelse aperiodicType = aperiodicLong \circthen \\
\quad    ReadyLong \\
  \circfi
\circblockclose \\
\quad   \lpar \{pending, data\}  |\lchanset end\_releases \rchanset| \emptyset \rpar \\
SignalTermination\\
\circblockclose \\
\quad  \lpar \{pending, data\} | \\
\qquad DeadlineClockSync \cup \lchanset  release~.~schedulable, releaseLong.schedulable \rchanset | \\
\quad \emptyset \rpar \\
 \quad \circblockopen
\circblockopen
  \circblockopen
      release~.~schedulable \then \Skip \\
      \extchoice \\
      releaseLong~.~schedulable?data \then \Skip \\
    \circblockclose \\ \circseq DeadlineClock
\circblockclose \\
\circinterrupt
\circblockopen
    end\_releases.schedulable \then \\
    \Skip
\circblockclose
\circblockclose
\circblockclose \\
 \circelse deadlineMissHandler == nullSchedulableId \circthen \\
\quad \circblockopen
	\circblockopen
		\circif aperiodicType = aperiodic \circthen \\
		\quad	Ready\\
		\circelse aperiodicType = aperiodicLong \circthen \\
		\quad	ReadyLong \\
		\circfi
	\circblockclose \\
   \quad	 \lpar \{pending, data\}  |\lchanset end\_releases \rchanset| \emptyset \rpar\\
  SignalTermination\\
\circblockclose \\
\circfi
\end{circusaction}
%
\begin{circusaction}
DeadlineClock \circdef \\
\quad	\circblockopen
		\circblockopen
			\circblockopen
				\circwait valueOf(deadline) \circseq \\
				release~.~deadlineMissHandler \then \\
				DeadlineClock
			\circblockclose \\
			\extchoice \\
			\circblockopen
	 			release\_complete~.~schedulable \then \\
				DeadlineClock
			\circblockclose
		\circblockclose
	\circblockclose \\
\quad    \circinterrupt
    \circblockopen
    		end\_releases~.~schedulable \then \\
    		%release\_complete~.~schedulable \then \\
	    	\Skip
    \circblockclose
\end{circusaction}
%short

\begin{circusaction}
Ready \circdef \\
\quad \circblockopen
	release.schedulable \then\\
	handleAsyncEventCall~.~schedulable \then\\
	Release
    \circblockclose\\
\quad \extchoice\\
\quad \circblockopen
	end\_releases~.~schedulable \then\\
	\Skip
    \circblockclose
\end{circusaction}
%long
\begin{circusaction}
ReadyLong \circdef \\
\quad \circblockopen
	releaseLong~.~schedulable~?~longData \then\\
	data := longData \circseq \\
	handleAsyncLongEventCall~.~schedulable~.~data \then\\
	ReleaseLong
     \circblockclose\\
\quad \extchoice\\
\quad \circblockopen
	end\_releases~.~schedulable \then\\
	\Skip
\circblockclose
\end{circusaction}
%
\begin{circusaction}
SignalTermination \circdef \\
\quad	\circblockopen
		signalTerminationCall~.~schedulable \then\\
		end\_releases~.~schedulable \then\\
		signalTerminationRet~.~schedulable \then\\
		done\_schedulable~.~schedulable \then\\
		\Skip
\circblockclose
\end{circusaction}
%short
\begin{circusaction}
Release \circdef \\
\quad \circblockopen
		release.schedulable \then\\
		pending := \true \circseq\\
		Release
	\circblockclose\\
\quad	\extchoice\\
\quad	\circblockopen
		handleAsyncEventRet.schedulable \then \\
		\circif pending = \true \circthen\\
\quad		\circblockopen
			pending := \false \circseq \\
			release\_complete~.~schedulable \then \\
			handleAsyncEventCall.schedulable \then\\
			Release
		\circblockclose\\
		\circelse pending = \false \circthen\\
\quad			 Ready\\
		\circfi
\quad	\circblockclose\\
\quad	 \extchoice\\
\quad	\circblockopen
		end\_releases.schedulable \then \\
		\Skip
	\circblockclose\\
\end{circusaction}
%long
\begin{circusaction}
ReleaseLong \circdef \\
\quad \circblockopen
		releaseLong.schedulable~?~longData \then\\
		data := longData \circseq \\
		pending := \true \circseq\\
		ReleaseLong
	\circblockclose\\
\quad		\extchoice\\
\quad	\circblockopen
		handleAsyncLongEventRet.schedulable \then \\
		\circif pending = \true \circthen\\
\quad		\circblockopen
			pending := \false \circseq \\
			release\_complete~.~schedulable \then \\
			handleAsyncLongEventCall.schedulable.data \then\\
			ReleaseLong
		\circblockclose\\
		\circelse pending = \false \circthen\\
\quad			 ReadyLong \\
		\circfi
\quad	\circblockclose\\
\quad	 \extchoice\\
\quad	\circblockopen
		end\_releases.schedulable \then \\
		\Skip
	\circblockclose\\
\end{circusaction}
%
\begin{circusaction}
Cleanup \circdef \\
\quad cleanupSchedulableCall~.~schedulable \then\\
\quad cleanupSchedulableRet~.~schedulable \then \\
\quad \Skip
\end{circusaction}
%
\begin{circusaction}
\circspot \circblockopen  \circmu X \circspot \circblockopen   \lschexpract Init \rschexpract \circseq Start \circseq\\
   \circblockopen  \circif applicationTerminating = \false \circthen \\
	\qquad \circblockopen Execute \circseq Cleanup \circseq X \circblockclose\\
 \circelse applicationTerminating = \true \circthen \\
 \qquad \circblockopen
	end\_aperiodic\_app~.~schedulable \then \\
	\Skip
 \circblockclose \\
\circfi \circblockclose \circblockclose \circblockclose
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
