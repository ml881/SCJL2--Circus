\begin{zsection}
  \SECTION ~ TopLevelMissionSequencerFW ~ \parents ~ TopLevelMissionSequencerChan, \\
  \quad MissionId, MissionMethChan, SchedulableId, MissionFWChan, FrameworkChan
\end{zsection}
%
\begin{circus}
  \circprocess ~ TopLevelMissionSequencerFW ~ \circdef ~ sequencer : SchedulableID \circspot ~ \circbegin
\end{circus}
%
\begin{schema}{State}
  currentMission : MissionID\\
  continue : \boolean
\end{schema}
%
\begin{parser}
\begin{circusaction}
\circstate State
\end{circusaction}
\end{parser}
%
\begin{schema}{Init}
  State~'
\where
  continue' = \true \\
  currentMission' = nullMissionId
\end{schema}
%
\begin{circusaction}
Start ~ \circdef ~ \\
\quad start\_toplevel\_sequencer~.~sequencer \then \\
\quad \Skip \\
\end{circusaction}
%
\begin{circusaction}
Execute ~ \circdef \\
\quad \circblockopen
	\circblockopen
  		\circblockopen
    			RunMission \circseq\\
    			end\_methods~.~sequencer \then \\
    			\Skip\\
    		\circblockclose\\
    			\lpar \{currentMission \} | \lchanset end\_methods \rchanset | \emptyset \rpar\\
    		Methods\\
    	 \circblockclose   \\
    	 	\lpar \emptyset | CCSync | \{ continue \} \rpar\\
    	 ContinueController \\
    \circblockclose\\
\end{circusaction}
%
\begin{circusaction}
RunMission \circdef \\
\quad GetNextMission \circseq \\
\quad StartMission \circseq \\
\quad Continue
\end{circusaction}
%
\begin{circusaction}
GetNextMission ~ \circdef ~ \\
\quad    getNextMissionCall~.~sequencer \then \\
\quad    getNextMissionRet~.~sequencer~?~next \then\\
\quad    currentMission := next
\end{circusaction}
%
\begin{circusaction}
StartMission~ \circdef ~\\
\quad    \circif currentMission \neq nullMissionId \circthen\\
\qquad    \circblockopen
	     start\_mission~.~currentMission~.~sequencer \then\\
	     done\_mission~.~currentMission~?~returnedcontinue \then \\
	     set\_continue~.~sequencer~!~returnedcontinue \then \\
	     \Skip
    \circblockclose\\
\quad   \circelse currentMission = nullMissionId \circthen\\
\qquad    \circblockopen
 	     set\_continue~.~sequencer~!~\false \then\\
 	     \Skip\\
    \circblockclose \\
\quad     \circfi

\end{circusaction}
%
\begin{circusaction}
Continue \circdef \\
\quad \circblockopen
	get\_continue~.~sequencer~?~continue\prefixcolon(continue = \true) \then \\
 	RunMission \\
    \circblockclose	\\
\quad \extchoice \\
\quad \circblockopen
	get\_continue~.~sequencer~?~continue\prefixcolon(continue = \false) \then \\
 	\Skip\\
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
Methods ~ \circdef \\

\quad   \circblockopen
     SequenceTerminationPending \circseq\\
     Methods\\
   \circblockclose\\
\quad   \extchoice \\
\quad   \circblockopen
   	end\_methods~.~sequencer \then \\
   	\Skip\\
   \circblockclose

\end{circusaction}
%
\begin{circusaction}
SequenceTerminationPending ~ \circdef \\
\quad	sequenceTerminationPendingCall~.~sequencer \then \\
\quad	get\_continue~.~sequencer~?~continue \then \\
\quad 	sequenceTerminationPendingRet~.~sequencer~!~continue \then\\
\quad 	\Skip\\
\end{circusaction}
%
\begin{circusaction}
ContinueController \circdef \\
\quad \circblockopen
	get\_continue~.~sequencer~!~continue \then \\
	ContinueController\\
    \circblockclose\\
\quad \extchoice \\
\quad \circblockopen
	set\_continue~.~sequencer~?~newContinue \then \\
	continue := newContinue \circseq\\
	ContinueController\\
     \circblockclose \\
     \quad   \extchoice \\
\quad   \circblockopen
   	end\_methods~.~sequencer \then \\
   	\Skip\\
   \circblockclose
\end{circusaction}
%
\begin{circusaction}
Finish ~ \circdef ~\\
\quad \circblockopen
  	done\_toplevel\_sequencer \then\\
  	end\_sequencer\_app~.~sequencer \then \\
  	\Skip   \\
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
  \circspot \lschexpract Init \rschexpract \circseq Start \circseq Execute \circseq Finish
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
