

\circchannel get\_priorityLevel : ThreadID \cross ObjectID \cross PriorityLevel \\
\end{circus}
%
\begin{circus}
\circchannel raise\_thread\_priority : ThreadID \cross PriorityLevel \\
\circchannel lower\_thread\_priority : ThreadID  \\
\end{circus}
%
\begin{circus}
\circchannel set\_interrupted : ThreadID \cross \boolean \\
\circchannel get\_interrupted : ThreadID \cross \boolean \\
\end{circus}

\begin{circus}
\circchannel interrupt : ThreadID \\
\end{circus}
%
\begin{circus}
\circchannel isInterruptedCall : ThreadID \\
\circchannel isInterruptedRet : ThreadID \cross \boolean \\
\end{circus}
%
\begin{circus}
\circchannel interruptedCall : ThreadID \\
\circchannel interruptedRet : ThreadID \cross \boolean \\
\end{circus}

\circprocess Thread   =  thread : ThreadID ; basePriority : PriorityLevel  \circspot \circbegin

ThreadFW(thread, basePriority) =
	( 
		ThreadFWState(thread, basePriority, <basePriority>, False)
		[|{ ThreadFWStateSync }|] 
		Execute(thread)
	)
	\ (done_toplevel_sequencer -> SKIP)


  
ThreadFWState(thread, basePriority, priorityStack, activePriority, interrupted) =
	(
		raise_thread_priority.thread?ceilingPriority ->
		ThreadFWState(thread, basePriority, priorityStack^ceilingPriority, ceilingPriority, interrupted)
	)
	[]
	(
		lower_thread_priority.thread -> 
		ThreadFWState(thread, basePriority, <basePriority>, <basePriority>, interrupted)
	)
	[]
	()
	[]
	()
	[]
	()
	[]
	()
	[]
	()
	[]
	()
	[]
 	(
		get_interrupted.thread!interrupted -> 
		ThreadFWState(thread, basePriority, priorityStack, activePriority, interrupted)
	)
 	[] 
 	(
		set_interrupted.thread.newInterrupted -> 
		ThreadFWState(thread, basePriority, priorityStack, activePriority, newInterrupted)		
	)


	


Execute(thread) = 
 	( 
		Priority (thread)
		|||
		Interrupts(thread) 
		|||
		GetPriorityLevel(thread) 	
	)
	 \(
		done_toplevel_sequencer -> 
		SKIP 
	)	


Priority(thread) = 
 if priorityStack ==  <basePriority> then 
	IncreasePriority(thread)
 else 
	(
		IncreasePriority(thread) 
		[]
		DecreasePriority(thread)
	)
 

IncreasePriority(thread) = 
	raise_thread_priority.thread?ceilingPriority ->


	
	IncreasePriority(thread)

DecreasePriority(thread) = 
	lower_thread_priority.thread -> 
	
 	DecreasePriority (thread)



Interrupts(thread) = 
(
	Interrupt(thread) 
	|||
	IsInterrupted(thread)		 
	|||
	Interrupted(thread)
)


Interrupt(thread) = 
 interrupt.thread -> 
 set_interrupted.thread!True -> 
 SKIP


IsInterrupted(thread) = 
 isInterruptedCall.thread -> 
 get_interrupted.thread?interrupted -> 
 isInterruptedRet.thread!interrupted -> 
 SKIP


Interrupted(thread) = 
 interruptedCall.thread -> 
 get_interrupted.thread?interrupted -> 
 interruptedRet.thread!interrupted -> 
 set_interrupted.thread!False -> 
 SKIP


GetPriorityLevel =
 	get_priorityLevel.thread.object!activePriority -> 
 	GetPriorityLevel







  

